{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Oregon Engineering Transfer App Docs This documentation serves as a record of the creation of the Oregon Engineering Transfer App. The Oregon Engineering Transfer app is a web app that shows how an Engineering class completed at an Oregon Community College can be transferred to an engineering class in an Oregon 4-year School. Written in Django and Python. The GitHub repo for the project can be found here: https://github.com/ProfessorKazarinoff/oregon-transefer-app Click the menu items on the left to view the development steps. Or click the arrows at the bottom of each page. Goals Web App is useful to student users who want to find transfer classes and useful to administrators who want to post transfer class equivalencies User interface is easy to use and intuitive. Easy for students to select colleges and major and see transfer class equivalencies Administrators at 4-year Universities and 2-year Community Colleges can make changes to the courses offered and transfer class equivalencies Authorization model that allows 4-year college administrators to change transfer equivalencies, but protects student users from changing equivalencies Class-to-class, multiclass-to-multiclass, class-to-multiclass and multiclass-to-class equivalencies are included in Web App model. Two courses at a Community College can transfer as 1 class at a 4-year University. All 1-1, many-1, 1-many and many-many course equivalencies allowed. New 4-year Universities and 2-year Community Colleges can be added to the web app New transfer equivalencies can be added to the web app Web app is well-documented and upgradable Web app is secure to modern standards ## To work on the project locally Install the Anaconda distribution of Python . Open the Anaconda Prompt. Run the following commands: text git clone https://github.com/professorkazarinoff/oregon-transfer-app.git transfer cd transfer conda create -n transfer python=3.7 conda activate transfer conda install django pip install django-crispy-forms manage.py runserver [Ctrl]-[c] to exit.","title":"Welcome to the Oregon Engineering Transfer App Docs"},{"location":"#welcome-to-the-oregon-engineering-transfer-app-docs","text":"This documentation serves as a record of the creation of the Oregon Engineering Transfer App. The Oregon Engineering Transfer app is a web app that shows how an Engineering class completed at an Oregon Community College can be transferred to an engineering class in an Oregon 4-year School. Written in Django and Python. The GitHub repo for the project can be found here: https://github.com/ProfessorKazarinoff/oregon-transefer-app Click the menu items on the left to view the development steps. Or click the arrows at the bottom of each page.","title":"Welcome to the Oregon Engineering Transfer App Docs"},{"location":"#goals","text":"Web App is useful to student users who want to find transfer classes and useful to administrators who want to post transfer class equivalencies User interface is easy to use and intuitive. Easy for students to select colleges and major and see transfer class equivalencies Administrators at 4-year Universities and 2-year Community Colleges can make changes to the courses offered and transfer class equivalencies Authorization model that allows 4-year college administrators to change transfer equivalencies, but protects student users from changing equivalencies Class-to-class, multiclass-to-multiclass, class-to-multiclass and multiclass-to-class equivalencies are included in Web App model. Two courses at a Community College can transfer as 1 class at a 4-year University. All 1-1, many-1, 1-many and many-many course equivalencies allowed. New 4-year Universities and 2-year Community Colleges can be added to the web app New transfer equivalencies can be added to the web app Web app is well-documented and upgradable Web app is secure to modern standards ## To work on the project locally Install the Anaconda distribution of Python . Open the Anaconda Prompt. Run the following commands: text git clone https://github.com/professorkazarinoff/oregon-transfer-app.git transfer cd transfer conda create -n transfer python=3.7 conda activate transfer conda install django pip install django-crispy-forms manage.py runserver [Ctrl]-[c] to exit.","title":"Goals"},{"location":"part1_motivation/","text":"This is the first part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges that want to transfer to 4-year Universities. The transfer web app will show which classes from their community college engineering program will transfer to which classes in a 4-year University engineering program. In this first post, I'll review the motivation for the project and my initial idea of what the finished app will look like. The Oregon Engineering College Transfer Web App What does that even mean? Students at community colleges in Oregon state, including Portland Community College, Mount Hood Community College, Linn Benton Community College, Lane Community College and Clackamas Community College can transfer to 4-year universities in Oregon state such as Portland State University, Oregon State University and Oregon Institute of Technology.","title":"Oregon Engineering College Transfer App - Part 1: Motivation"},{"location":"part1_motivation/#the-oregon-engineering-college-transfer-web-app","text":"What does that even mean? Students at community colleges in Oregon state, including Portland Community College, Mount Hood Community College, Linn Benton Community College, Lane Community College and Clackamas Community College can transfer to 4-year universities in Oregon state such as Portland State University, Oregon State University and Oregon Institute of Technology.","title":"The Oregon Engineering College Transfer Web App"},{"location":"part2_environment_setup/","text":"This is the second part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges that want to transfer to 4-year Universities. The transfer web app will show which classes from their community college engineering program will transfer to which classes in a 4-year University engineering program. In this second post, I'll review the development environment I used to set up and build the web app. This includes installing the Anaconda distribution of Python, creating a GitHub repo, synching a local directory to the GitHub repo, installing packages, starting the project and running the project for the first time. Setting up the development environment What does that even mean? Before I started building the Oregon Engineering Transfer App, I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a development environment . To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below: An operating system: This web app was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS). Python: Python 3.7 (legacy Python is version 2.7) Anaconda: The Anaconda Prompt and the Anaconda Python distribution GitHub.com and git: Four different computers were used build the site. GitHub is the central place where the most up-to-date version of the site is kept. A virtual environment: A separate Python virtual environment that the web app will run in. Django: a Python web framework Pycharm IDE: a Python Integrated Development that I will use to build and test the web app. Deployment Target: A place for the web app to run. Initially this will be on the Huroku free tier. An operating system I am building the web app on at least four different computers depending on where I am. These computers include: Windows 10 Desktop at work Mac OSX laptop at home Windows 10 laptop at home Linux (Ubuntu 16.04 LTS) Desktop at home. Regardless of which computer I am using for development, the files that make up the web app will be the same because I'm using Git and GitHub.com to keep everything synced. I will also keep my virtual environments the same on each computer. An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. Download the latest release at: https://www.anaconda.com/download The Anaconda distribution of Python comes with an up-to-date and stable version of Python (Python 3.6, byt Python 3.7 can be specified during the creation of a virtual environment) and the Anaconda Prompt . The Anaconda Prompt is useful because it allows me to run shell commands on my Windows 10 machines. These are the same commands I would run in the terminal on my MacOS or Linux boxes. The Anaconda Prompt makes creating and activiting virtual environments easy and allows me to use git on Windows 10. Follow this post to install the Anaconda on Windows 10. Create a new virtual environment Before installing Django, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment transfer . The conda create command creates the environment and the -n staticsite flag adds the name. python=3.7 sets the Python version at 3.7. $ conda create -n transfer python=3.7 This command creates a new virtual environment called (transfer) . Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment (transfer) is created, we need to activate it and start using it with the command: $ conda activate transfer Now we see (transfer) before the terminal prompt. This means we are using the (transfer) virtual environment. Install Django Time for some fun! Installing Django. Django mature web framework built in Python. Django is included in the default Anaconda channel. The install command is: (transfer)$ conda install django Once django is installed, we can install django-crisy-forms . This package will help us build and use web forms in the Django framework. The docs for the Oregon Transfer App are built with a static site generator called MkDocs and theme called mkdocs-material . These packages can all be installed with pip . (transfer)$ conda install django (transfer)$ pip install django-crispy-forms (transfer)$ pip install mkdocs (transfer)$ pip install mkdocs-material Create a GitHub account and create a new repository We need to keep track of version control while building the Oregon Transfer App and allow other people to work on the App as well. Therefore, we'll use git and GitHub for verson control. Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. GitHub.com is the where the Oregon Transfer App code is remotely stored and integrates easily with git. Sign up for a GiHub.com account here: https://github.com/join The account activation screen looks something like: Once the account is set up, login and create a new repository. Use the + button on the upper right-hand menu: I named the repository: Oregon-Engineering-Transfer-App and included both a README.md and a GNU General Public License v3.0 . Make sure to include a .gitignore file as well. Select [Python] in the .gitignore dropdown options. Once the repo is created, we need to modify the .gitignore file some more. We want to make sure that any Django files we need to ignore are kept out of git and any of the documentation site files are kept out of git (the documentation source files should stay in git). Edit the .gitignore file on the GitHub repo page. Click on the .gitignore file in the file browser and click the pencil icon in the upper right to edit. Once edits are complete click the green [Commit Changes] button at the botton. A link to the .gitignore for the Oregon Engineering Transfer App project is Here Make a directory for the Oregon Engineering Transfer App and link to GitHub Once the GitHub repo (short for repository, basically a folder with files on GitHub.com) is set up, the last step to complete the development environment is to link the remote repo on GitHub to the local version of the site on my computer. The local version is in a folder call transfer in the Documents folder. The transfer folder will contain all the code used to build the Oregon Engineering Transfer App. (transfer)$ cd Documents (transfer)$ mkdir transfer (transfer)$ cd transfer We can set up git to keep the contents of the local tranfer folder in sync with the contents of the Oregon-Engineering-Transfer-App repo on GitHub.com. The command git init will initiate or create the local repository. The command git remote add origin followed by the url of our github repo links local folder to the remote repo on github. Note the web address ends in .git . (transfer)$ git init (transfer)$ git remote add origin https://github.com/ProfessorKazarinoff/Oregon-Engineering-Transfer-App.git Now for the git magic. On GitHub.com we have a README.md file and a licence. But the local transfer folder on my laptop is empty. So the two folders aren't in sync. To make the contents of each folder identical, we pull the files from GitHub onto the local computer. A pull \"pulls\" or gets the files from GitHub and copies them to the local transfer folder. (transfer)$ git pull origin master If we look in the local transfer folder, we see the following three files: transfer/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md The development environment for the Oregon Transfer Web App is set! On to building the App! Now each time I work on the App, I navigate to the transfer folder on whatever computer I am using. Before any editing, I key in the command: $ git pull origin master After the pull , the transfer folder is up-to-date with the newest version of all the files on GitHub. Then I go about editing code, adding templates, changing settings, etc. After the edits, the last thing I do before shutting down the computer for the day is add all the changes to git with git add . (note there is a space between the add and the period . ). Then commit those changes locally with the line git commit -m \"commit message\" (note there are double quotes \"commit message\" used around the commit message), and finally push the changes up to github.com with git push origin master . Now the code for the Oregon Engineering Transfer App up on GitHub.com is the same as the code saved on my local machine. git add . git commit -m \"commit message\" git push origin master This ensures all of my local computers and the GitHub repo contain the same version of the App. Next Steps The next step is to build the front page of the web app.","title":"Oregon Engineering College Transfer App - Part 2: Development Environment"},{"location":"part2_environment_setup/#setting-up-the-development-environment","text":"What does that even mean? Before I started building the Oregon Engineering Transfer App, I needed to make sure the necessary software, packages and settings were in place. This starts with setting up a development environment . To me, a development environment is simply the software on a computer that allows me to get work done. In this case the development environment means the tools necessary to build this site. A list of the tools and technologies are below: An operating system: This web app was built on machines running Windows 10, Mac OSX and Linux (Ubuntu 16.04 LTS). Python: Python 3.7 (legacy Python is version 2.7) Anaconda: The Anaconda Prompt and the Anaconda Python distribution GitHub.com and git: Four different computers were used build the site. GitHub is the central place where the most up-to-date version of the site is kept. A virtual environment: A separate Python virtual environment that the web app will run in. Django: a Python web framework Pycharm IDE: a Python Integrated Development that I will use to build and test the web app. Deployment Target: A place for the web app to run. Initially this will be on the Huroku free tier.","title":"Setting up the development environment"},{"location":"part2_environment_setup/#an-operating-system","text":"I am building the web app on at least four different computers depending on where I am. These computers include: Windows 10 Desktop at work Mac OSX laptop at home Windows 10 laptop at home Linux (Ubuntu 16.04 LTS) Desktop at home. Regardless of which computer I am using for development, the files that make up the web app will be the same because I'm using Git and GitHub.com to keep everything synced. I will also keep my virtual environments the same on each computer. An advantage of using the Anaconda distribution of Python is that each of these four computers will have the same stable version of Python. Download the latest release at: https://www.anaconda.com/download The Anaconda distribution of Python comes with an up-to-date and stable version of Python (Python 3.6, byt Python 3.7 can be specified during the creation of a virtual environment) and the Anaconda Prompt . The Anaconda Prompt is useful because it allows me to run shell commands on my Windows 10 machines. These are the same commands I would run in the terminal on my MacOS or Linux boxes. The Anaconda Prompt makes creating and activiting virtual environments easy and allows me to use git on Windows 10. Follow this post to install the Anaconda on Windows 10.","title":"An operating system"},{"location":"part2_environment_setup/#create-a-new-virtual-environment","text":"Before installing Django, we should create a new virtual environment. The same virtual environment on each of the computers I use means the same packages are installed on each computer. To create a new virtual environment, open up the Anaconda Prompt (on Windows) or a terminal (on Linux or Mac OSX). Let's call our new virtual environment transfer . The conda create command creates the environment and the -n staticsite flag adds the name. python=3.7 sets the Python version at 3.7. $ conda create -n transfer python=3.7 This command creates a new virtual environment called (transfer) . Becuase I use four different computers to work on the site, I need to make sure the same Python packages are installed on each computer. Using a virtual environment ensures this consistency. Once the virtual environment (transfer) is created, we need to activate it and start using it with the command: $ conda activate transfer Now we see (transfer) before the terminal prompt. This means we are using the (transfer) virtual environment.","title":"Create a new virtual environment"},{"location":"part2_environment_setup/#install-django","text":"Time for some fun! Installing Django. Django mature web framework built in Python. Django is included in the default Anaconda channel. The install command is: (transfer)$ conda install django Once django is installed, we can install django-crisy-forms . This package will help us build and use web forms in the Django framework. The docs for the Oregon Transfer App are built with a static site generator called MkDocs and theme called mkdocs-material . These packages can all be installed with pip . (transfer)$ conda install django (transfer)$ pip install django-crispy-forms (transfer)$ pip install mkdocs (transfer)$ pip install mkdocs-material","title":"Install Django"},{"location":"part2_environment_setup/#create-a-github-account-and-create-a-new-repository","text":"We need to keep track of version control while building the Oregon Transfer App and allow other people to work on the App as well. Therefore, we'll use git and GitHub for verson control. Git is a command line utility that assists with version control. Using git means changes made to files on one computer can be synced with the same files on another computer. GitHub.com is the where the Oregon Transfer App code is remotely stored and integrates easily with git. Sign up for a GiHub.com account here: https://github.com/join The account activation screen looks something like: Once the account is set up, login and create a new repository. Use the + button on the upper right-hand menu: I named the repository: Oregon-Engineering-Transfer-App and included both a README.md and a GNU General Public License v3.0 . Make sure to include a .gitignore file as well. Select [Python] in the .gitignore dropdown options. Once the repo is created, we need to modify the .gitignore file some more. We want to make sure that any Django files we need to ignore are kept out of git and any of the documentation site files are kept out of git (the documentation source files should stay in git). Edit the .gitignore file on the GitHub repo page. Click on the .gitignore file in the file browser and click the pencil icon in the upper right to edit. Once edits are complete click the green [Commit Changes] button at the botton. A link to the .gitignore for the Oregon Engineering Transfer App project is Here","title":"Create a GitHub account and create a new repository"},{"location":"part2_environment_setup/#make-a-directory-for-the-oregon-engineering-transfer-app-and-link-to-github","text":"Once the GitHub repo (short for repository, basically a folder with files on GitHub.com) is set up, the last step to complete the development environment is to link the remote repo on GitHub to the local version of the site on my computer. The local version is in a folder call transfer in the Documents folder. The transfer folder will contain all the code used to build the Oregon Engineering Transfer App. (transfer)$ cd Documents (transfer)$ mkdir transfer (transfer)$ cd transfer We can set up git to keep the contents of the local tranfer folder in sync with the contents of the Oregon-Engineering-Transfer-App repo on GitHub.com. The command git init will initiate or create the local repository. The command git remote add origin followed by the url of our github repo links local folder to the remote repo on github. Note the web address ends in .git . (transfer)$ git init (transfer)$ git remote add origin https://github.com/ProfessorKazarinoff/Oregon-Engineering-Transfer-App.git Now for the git magic. On GitHub.com we have a README.md file and a licence. But the local transfer folder on my laptop is empty. So the two folders aren't in sync. To make the contents of each folder identical, we pull the files from GitHub onto the local computer. A pull \"pulls\" or gets the files from GitHub and copies them to the local transfer folder. (transfer)$ git pull origin master If we look in the local transfer folder, we see the following three files: transfer/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 README.md The development environment for the Oregon Transfer Web App is set! On to building the App! Now each time I work on the App, I navigate to the transfer folder on whatever computer I am using. Before any editing, I key in the command: $ git pull origin master After the pull , the transfer folder is up-to-date with the newest version of all the files on GitHub. Then I go about editing code, adding templates, changing settings, etc. After the edits, the last thing I do before shutting down the computer for the day is add all the changes to git with git add . (note there is a space between the add and the period . ). Then commit those changes locally with the line git commit -m \"commit message\" (note there are double quotes \"commit message\" used around the commit message), and finally push the changes up to github.com with git push origin master . Now the code for the Oregon Engineering Transfer App up on GitHub.com is the same as the code saved on my local machine. git add . git commit -m \"commit message\" git push origin master This ensures all of my local computers and the GitHub repo contain the same version of the App.","title":"Make a directory for the Oregon Engineering Transfer App and link to GitHub"},{"location":"part2_environment_setup/#next-steps","text":"The next step is to build the front page of the web app.","title":"Next Steps"},{"location":"part3_front_page_app/","text":"This is the third part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges that want to transfer to 4-year Universities. The transfer web app will show which classes from their community college engineering program will transfer to which classes in a 4-year University engineering program. In this third post, I'll review building the first pages app. The first app to add to the django project. This includes creating the app at the command line, adding the app to the project, creating a view, and creating a urlpattern. Then we'll run the server locally and see if the pages app works. Django Apps What is a django app and how is it different from a django project? A djano app is part of a django project. One django project can have many apps. Create the pages app Add the pages app to the list of installed apps # Application definition INSTALLED_APPS = [ # django 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # project specific 'pages.apps.PagesConfig', ] Define a homepage view in pages/views.py from django.http import HttpResponse def homePageView(request): return HttpResponse('College Transfer App') Configure the homepage URL pattern in the pages app Configure the homepage URL pattern in the overall transfer project Test the server locally Summary","title":"Oregon Engineering College Transfer App - Part 3: Front Page App"},{"location":"part3_front_page_app/#django-apps","text":"What is a django app and how is it different from a django project? A djano app is part of a django project. One django project can have many apps.","title":"Django Apps"},{"location":"part3_front_page_app/#create-the-pages-app","text":"","title":"Create the pages app"},{"location":"part3_front_page_app/#add-the-pages-app-to-the-list-of-installed-apps","text":"# Application definition INSTALLED_APPS = [ # django 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # project specific 'pages.apps.PagesConfig', ]","title":"Add the pages app to the list of installed apps"},{"location":"part3_front_page_app/#define-a-homepage-view","text":"in pages/views.py from django.http import HttpResponse def homePageView(request): return HttpResponse('College Transfer App')","title":"Define a homepage view"},{"location":"part3_front_page_app/#configure-the-homepage-url-pattern-in-the-pages-app","text":"","title":"Configure the homepage URL pattern in the pages app"},{"location":"part3_front_page_app/#configure-the-homepage-url-pattern-in-the-overall-transfer-project","text":"","title":"Configure the homepage URL pattern in the overall transfer project"},{"location":"part3_front_page_app/#test-the-server-locally","text":"","title":"Test the server locally"},{"location":"part3_front_page_app/#summary","text":"","title":"Summary"},{"location":"part4_about_page_and_bootstrap/","text":"This is the fourth part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges that want to transfer to 4-year Universities. The transfer web app will show which classes from their community college engineering program will transfer to which classes in a 4-year University engineering program. In this four post, I'll review building the about page and using bootstrap to stype the pages. This includes creating a view, and creating a urlpattern. Then we'll create a template and use django's template engine and boostrap to build the page. Finally we'll run the server locally and see if the about works and is styled correctly. What is Bootstrap? Create an about page URL in the pages app project urls page app urls Create the view for the home and about pages Create the templates for the home and about pages Add template path to project settings.py Base template Home template About template Run the local server Add Bootstrap to templates Create a new bootstrap_base.html template Add the bootswatch litera bootstrap theme css to the pages app/static/css folder Build a nav.html template Modify the home.html template to use bootstrap Modify the about.html template to use bootstrap Run the server locally. See if the bootstrap styling works. Write and run tests for two pages Write tests Run tests Summary Future Work What is Bootstrap? What is Bootstrap and why add it to the django project? Bootstrap is a collection of html, javascript and css that produces mobile-responsive web wages. Using bootstrap will make the Oregon Transfer App site work on phones, tablets and computers. The look of the site will also be improved using bootstrap. We'll add bootstrap functionality to django templates to produce a navigation menu and styled home and about pages. Create an about page URL in the pages app We need to make sure that both the overall project urls and the page app urls are set up for our new pages (the home page and about page). First check that the overall project url's are pointing to the pages url's: project urls # transfer_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), ] page app urls Now modify the page app urls. This means modifying the file pages/urls.py. Note the imports at the top of the file. And note how the AboutPageView.as_view() and HomePageView.as_view() methods are included in the paths. # pages/urls.py from django.urls import path from .views import HomePageView, AboutPageView urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), path('', HomePageView.as_view(), name='home'), ] Create the view for the home and about pages Now within the pages app, we need to modify the pages/views.py file. We'll build a class-based view for the home page and build a class-based view for the about page. Note the imports at the top of the file. The class names for the views have to match the class names for the views which we included in the pages/urls.py file. # pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html' Create the templates for the home and about pages Now we'll build three templates enventuall will render the home page and the about page. One template will be a base template and then the home and about templates will build upon this base template. Before we use the templates, a templates dir has to be created in the base project directory. All three templates will be saved in this templates/ directory. Add template path to project settings.py After the templates directory is created (in the project root directory), the transfer_project/setting.py file needs to be modified to include the new templates directory. In the TEMPLATES block of the transfer_project/setting.py file, add [os.path.join(BASE_DIR, 'templates')] to 'DIRS': # transfer_project/settings.py TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] Base template Now we'll build the base template. This template acts as the parent template for the home and about templates. Create a base.html file in the templates directory. <!-- templates/base.html --> {% block doctype %} <!DOCTYPE html> <html lang=\"en\"> {% endblock %} {% block head %} <head> <meta charset=\"UTF-8\"> {% block title %} <title>Oregon Transfer App</title> {% endblock %} </head> {% endblock %} {% block header %} <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% endblock %} {% block content %} {% endblock %} Home template The home template is next. Create a home.html template in the templates directory. The home template extends the base template. <!-- templates/home.html --> {% extends 'base.html' %} {% block title %} <title>Home</title> {% endblock %} {% block content %} <h1>Home page</h1> {% endblock content %} About template The about template is next. Create an about.html template in the templates directory. The about template also extends the base template. <!-- templates/about.html --> {% extends 'base.html' %} {% block title %} <title>About</title> {% endblock %} {% block content %} <h1>About page</h1> {% endblock %} Run the local server Let's test the site. Run the local server and see our changes. I ran the server from the Anaconda Prompt. > conda activate transfer (transfer)> python manage.py runserver The resulting home and about pages should look something like this: Add Bootstrap to templates Now we'll add bootstrap styling to the templates. I'm going to use the bootstrap CDN for simplicity instead of downloading and using the css and javascript files that make up bootstrap. As long there is an internet connection, the CDN link will work. Create a new bootstrap_base.html template In the templates directory add another .html file called bootstrap_base.html. Include the following in the template. Note in the block stylesheets section there is a link to the bootstrap css. Near the bottom of the page, there are links to the bootstrap javascript. According to the bootstrap docs, the order of javascript links should go: jquery, popper.js, bootstrap.js. The links for the bootstrap CDN may change, the links I used are here . <!-- templates/bootstrap_base.html --> {% load staticfiles %} {% block doctype %} <!DOCTYPE html> <lang=\"en\"> {% endblock %} {% block head %} <head> {% block meta %} <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <meta name=\"description\" content=\"\"> <meta name=\"author\" content=\"\"> {% endblock %} {% block favicon %}{% endblock %} <title>{% block title %}Title{% endblock %}</title> {% block stylesheets %} <!-- bootstrap 4 CDN --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"> <!-- Custom styles for this template --> <link rel=\"stylesheet\" href=\"{% static 'css/navbar-top-fixed.css' %}\"> <!-- bootswatch theme --> <link rel=\"stylesheet\" href=\"{% static 'css/bootswatch_litera_bootstrap.css' %}\"> {% endblock %} </head> {% endblock %} {% block body %} <body> {% block nav %} {% include \"nav.html\" %} {% endblock %} {% block breadcrumb %}{% endblock %} <main role=\"main\" class=\"container\"> {% block content %} {% endblock %} </main><!-- /.container --> {% block javascripts %} <!-- jquery, popper.js and bootstrap.js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"></script></body> {% endblock %} </body> {% endblock %} </html> Add the bootswatch litera bootstrap theme css to the pages app/static/css folder I want the bootswatch litera theme to style the site. I downloaded the litera theme css and added the css file to /pages/static/css as bootswatch_litera_bootstrap.css. That's the name of the css file we used in the bootstrap_home.html template. Note how the bootstrap_base.html template has the tag {% load staticfiles %}. This tag loads static files (css, javascript, images). https://bootswatch.com/4/litera/bootstrap.css I also added an additional small css file called navbar-top-fixed.css to the pages/static/css folder. Without this little piece of css, the main div block of the site was cut off by the nav bar. /* pages/static/css/navbar-top-fixed.css */ /* Show it is fixed to the top */ body { min-height: 75rem; padding-top: 4.5rem; } Build a nav.html template The bootstrap_base.html template has a section for a nav bar. The nav bar html is included in the bootstrap_base.html template in an {% include %} block: <!-- templates/bootstrap_base.html --> {% block nav %} {% include \"nav.html\" %} {% endblock %} So we need to make a new nav.html template in the templates directory. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"#\">Login</a> <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> Modify the home.html template to use bootstrap Next modify the home page template to use bootstrap styling. Note the bootstrap_base.html template is now used as the parent template. <!-- templates/home.html --> {% extends 'bootstrap_base.html' %} {% block content %} <div class=\"jumbotron\"> <h1>Oregon Engineering Transfer App</h1> <p class=\"lead\">A project to provide college students a way to know which college classes transfer <br> For students and administrators</p> <a class=\"btn btn-lg btn-success\" href=\"../../components/navbar/\" role=\"button\">Get Started \u00bb</a> </div> {% endblock content %} Modify the about.html template to use bootstrap Now modify the about page template to use bootstrap styling. Note again how the bootstrap_base.html template is used as the parent template. <!-- templates/about.html --> {% extends 'bootstrap_base.html' %} {% block content %} <div class=\"jumbotron\"> <h1>About</h1> <p class=\"lead\">This project started to help students and administrators <br>It works well for both</p> <a class=\"btn btn-lg btn-success\" href=\"../../components/navbar/\" role=\"button\">Get Started \u00bb</a> </div> {% endblock content %} All the new template and css files ends up with the following directory structure: Run the server locally. See if the bootstrap styling works. OK, let's run the server locally and see if all the bootstrap styling changes made a difference. I ran the local server from the Anaconda Prompt. > conda activate transfer (transfer)> python manage.py runserver Awesome! The home and about pages look great! Write and run tests for two pages It's good practice to write tests for our django project. Django has a built-in test framework that allows us to test the home page and test the about page. In the pages app, we'll modify the tests.py file to include these tests. Once the tests are written, the tests can be run from the Anaconda Prompt. Write tests Write the tests in the pages/tests.py file: # pages/tests.py from django.test import SimpleTestCase class PagesTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) Run tests Run the tests with the manage.py test command. If the local server is still running key in [Ctrl-c] to stop the server. (transfer)> python manage.py test The output I got after running the tests looked something like: Creating test database for alias 'default'... System check identified no issues (0 silenced). .. ---------------------------------------------------------------------- Ran 2 tests in 0.018s OK Destroying test database for alias 'default'... Great! Both tests passed. Summary We got a lot of work done on the transfer app built with django and Python. First we created a new pages URL route and created two new pages class-based views. Then we built some basic templates in django's built-in templating language. Next, we built a new base template which included the bootstrap CDN. We modified the home and about templates to use some bootstrap elements. We also built a nav template that created a nav bar for the site. Finally we wrote two tests, one test for the home page and one test for the about page. Both tests passed. Future Work Next, we need to build a user app into our django project. The user app will create functionality to allow users to register and login to the site. Eventually these logged-in users will have access to modify the transfer equivalencies.","title":"Oregon Engineering College Transfer App - Part 4: About Page and Bootstrap"},{"location":"part4_about_page_and_bootstrap/#what-is-bootstrap","text":"What is Bootstrap and why add it to the django project? Bootstrap is a collection of html, javascript and css that produces mobile-responsive web wages. Using bootstrap will make the Oregon Transfer App site work on phones, tablets and computers. The look of the site will also be improved using bootstrap. We'll add bootstrap functionality to django templates to produce a navigation menu and styled home and about pages.","title":"What is Bootstrap?"},{"location":"part4_about_page_and_bootstrap/#create-an-about-page-url-in-the-pages-app","text":"We need to make sure that both the overall project urls and the page app urls are set up for our new pages (the home page and about page). First check that the overall project url's are pointing to the pages url's:","title":"Create an about page URL in the pages app"},{"location":"part4_about_page_and_bootstrap/#project-urls","text":"# transfer_project/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('pages.urls')), ]","title":"project urls"},{"location":"part4_about_page_and_bootstrap/#page-app-urls","text":"Now modify the page app urls. This means modifying the file pages/urls.py. Note the imports at the top of the file. And note how the AboutPageView.as_view() and HomePageView.as_view() methods are included in the paths. # pages/urls.py from django.urls import path from .views import HomePageView, AboutPageView urlpatterns = [ path('about/', AboutPageView.as_view(), name='about'), path('', HomePageView.as_view(), name='home'), ]","title":"page app urls"},{"location":"part4_about_page_and_bootstrap/#create-the-view-for-the-home-and-about-pages","text":"Now within the pages app, we need to modify the pages/views.py file. We'll build a class-based view for the home page and build a class-based view for the about page. Note the imports at the top of the file. The class names for the views have to match the class names for the views which we included in the pages/urls.py file. # pages/views.py from django.views.generic import TemplateView class HomePageView(TemplateView): template_name = 'home.html' class AboutPageView(TemplateView): template_name = 'about.html'","title":"Create the view for the home and about pages"},{"location":"part4_about_page_and_bootstrap/#create-the-templates-for-the-home-and-about-pages","text":"Now we'll build three templates enventuall will render the home page and the about page. One template will be a base template and then the home and about templates will build upon this base template. Before we use the templates, a templates dir has to be created in the base project directory. All three templates will be saved in this templates/ directory.","title":"Create the templates for the home and about pages"},{"location":"part4_about_page_and_bootstrap/#add-template-path-to-project-settingspy","text":"After the templates directory is created (in the project root directory), the transfer_project/setting.py file needs to be modified to include the new templates directory. In the TEMPLATES block of the transfer_project/setting.py file, add [os.path.join(BASE_DIR, 'templates')] to 'DIRS': # transfer_project/settings.py TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ]","title":"Add template path to project settings.py"},{"location":"part4_about_page_and_bootstrap/#base-template","text":"Now we'll build the base template. This template acts as the parent template for the home and about templates. Create a base.html file in the templates directory. <!-- templates/base.html --> {% block doctype %} <!DOCTYPE html> <html lang=\"en\"> {% endblock %} {% block head %} <head> <meta charset=\"UTF-8\"> {% block title %} <title>Oregon Transfer App</title> {% endblock %} </head> {% endblock %} {% block header %} <header> <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a> </header> {% endblock %} {% block content %} {% endblock %}","title":"Base template"},{"location":"part4_about_page_and_bootstrap/#home-template","text":"The home template is next. Create a home.html template in the templates directory. The home template extends the base template. <!-- templates/home.html --> {% extends 'base.html' %} {% block title %} <title>Home</title> {% endblock %} {% block content %} <h1>Home page</h1> {% endblock content %}","title":"Home template"},{"location":"part4_about_page_and_bootstrap/#about-template","text":"The about template is next. Create an about.html template in the templates directory. The about template also extends the base template. <!-- templates/about.html --> {% extends 'base.html' %} {% block title %} <title>About</title> {% endblock %} {% block content %} <h1>About page</h1> {% endblock %}","title":"About template"},{"location":"part4_about_page_and_bootstrap/#run-the-local-server","text":"Let's test the site. Run the local server and see our changes. I ran the server from the Anaconda Prompt. > conda activate transfer (transfer)> python manage.py runserver The resulting home and about pages should look something like this:","title":"Run the local server"},{"location":"part4_about_page_and_bootstrap/#add-bootstrap-to-templates","text":"Now we'll add bootstrap styling to the templates. I'm going to use the bootstrap CDN for simplicity instead of downloading and using the css and javascript files that make up bootstrap. As long there is an internet connection, the CDN link will work.","title":"Add Bootstrap to templates"},{"location":"part4_about_page_and_bootstrap/#create-a-new-bootstrap_basehtml-template","text":"In the templates directory add another .html file called bootstrap_base.html. Include the following in the template. Note in the block stylesheets section there is a link to the bootstrap css. Near the bottom of the page, there are links to the bootstrap javascript. According to the bootstrap docs, the order of javascript links should go: jquery, popper.js, bootstrap.js. The links for the bootstrap CDN may change, the links I used are here . <!-- templates/bootstrap_base.html --> {% load staticfiles %} {% block doctype %} <!DOCTYPE html> <lang=\"en\"> {% endblock %} {% block head %} <head> {% block meta %} <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"> <meta name=\"description\" content=\"\"> <meta name=\"author\" content=\"\"> {% endblock %} {% block favicon %}{% endblock %} <title>{% block title %}Title{% endblock %}</title> {% block stylesheets %} <!-- bootstrap 4 CDN --> <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"> <!-- Custom styles for this template --> <link rel=\"stylesheet\" href=\"{% static 'css/navbar-top-fixed.css' %}\"> <!-- bootswatch theme --> <link rel=\"stylesheet\" href=\"{% static 'css/bootswatch_litera_bootstrap.css' %}\"> {% endblock %} </head> {% endblock %} {% block body %} <body> {% block nav %} {% include \"nav.html\" %} {% endblock %} {% block breadcrumb %}{% endblock %} <main role=\"main\" class=\"container\"> {% block content %} {% endblock %} </main><!-- /.container --> {% block javascripts %} <!-- jquery, popper.js and bootstrap.js --> <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script> <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"></script> <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"></script></body> {% endblock %} </body> {% endblock %} </html>","title":"Create a new bootstrap_base.html template"},{"location":"part4_about_page_and_bootstrap/#add-the-bootswatch-litera-bootstrap-theme-css-to-the-pages-appstaticcss-folder","text":"I want the bootswatch litera theme to style the site. I downloaded the litera theme css and added the css file to /pages/static/css as bootswatch_litera_bootstrap.css. That's the name of the css file we used in the bootstrap_home.html template. Note how the bootstrap_base.html template has the tag {% load staticfiles %}. This tag loads static files (css, javascript, images). https://bootswatch.com/4/litera/bootstrap.css I also added an additional small css file called navbar-top-fixed.css to the pages/static/css folder. Without this little piece of css, the main div block of the site was cut off by the nav bar. /* pages/static/css/navbar-top-fixed.css */ /* Show it is fixed to the top */ body { min-height: 75rem; padding-top: 4.5rem; }","title":"Add the bootswatch litera bootstrap theme css to the pages app/static/css folder"},{"location":"part4_about_page_and_bootstrap/#build-a-navhtml-template","text":"The bootstrap_base.html template has a section for a nav bar. The nav bar html is included in the bootstrap_base.html template in an {% include %} block: <!-- templates/bootstrap_base.html --> {% block nav %} {% include \"nav.html\" %} {% endblock %} So we need to make a new nav.html template in the templates directory. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"#\">Login</a> <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav>","title":"Build a nav.html template"},{"location":"part4_about_page_and_bootstrap/#modify-the-homehtml-template-to-use-bootstrap","text":"Next modify the home page template to use bootstrap styling. Note the bootstrap_base.html template is now used as the parent template. <!-- templates/home.html --> {% extends 'bootstrap_base.html' %} {% block content %} <div class=\"jumbotron\"> <h1>Oregon Engineering Transfer App</h1> <p class=\"lead\">A project to provide college students a way to know which college classes transfer <br> For students and administrators</p> <a class=\"btn btn-lg btn-success\" href=\"../../components/navbar/\" role=\"button\">Get Started \u00bb</a> </div> {% endblock content %}","title":"Modify the home.html template to use bootstrap"},{"location":"part4_about_page_and_bootstrap/#modify-the-abouthtml-template-to-use-bootstrap","text":"Now modify the about page template to use bootstrap styling. Note again how the bootstrap_base.html template is used as the parent template. <!-- templates/about.html --> {% extends 'bootstrap_base.html' %} {% block content %} <div class=\"jumbotron\"> <h1>About</h1> <p class=\"lead\">This project started to help students and administrators <br>It works well for both</p> <a class=\"btn btn-lg btn-success\" href=\"../../components/navbar/\" role=\"button\">Get Started \u00bb</a> </div> {% endblock content %} All the new template and css files ends up with the following directory structure:","title":"Modify the about.html template to use bootstrap"},{"location":"part4_about_page_and_bootstrap/#run-the-server-locally-see-if-the-bootstrap-styling-works","text":"OK, let's run the server locally and see if all the bootstrap styling changes made a difference. I ran the local server from the Anaconda Prompt. > conda activate transfer (transfer)> python manage.py runserver Awesome! The home and about pages look great!","title":"Run the server locally. See if the bootstrap styling works."},{"location":"part4_about_page_and_bootstrap/#write-and-run-tests-for-two-pages","text":"It's good practice to write tests for our django project. Django has a built-in test framework that allows us to test the home page and test the about page. In the pages app, we'll modify the tests.py file to include these tests. Once the tests are written, the tests can be run from the Anaconda Prompt.","title":"Write and run tests for two pages"},{"location":"part4_about_page_and_bootstrap/#write-tests","text":"Write the tests in the pages/tests.py file: # pages/tests.py from django.test import SimpleTestCase class PagesTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200)","title":"Write tests"},{"location":"part4_about_page_and_bootstrap/#run-tests","text":"Run the tests with the manage.py test command. If the local server is still running key in [Ctrl-c] to stop the server. (transfer)> python manage.py test The output I got after running the tests looked something like: Creating test database for alias 'default'... System check identified no issues (0 silenced). .. ---------------------------------------------------------------------- Ran 2 tests in 0.018s OK Destroying test database for alias 'default'... Great! Both tests passed.","title":"Run tests"},{"location":"part4_about_page_and_bootstrap/#summary","text":"We got a lot of work done on the transfer app built with django and Python. First we created a new pages URL route and created two new pages class-based views. Then we built some basic templates in django's built-in templating language. Next, we built a new base template which included the bootstrap CDN. We modified the home and about templates to use some bootstrap elements. We also built a nav template that created a nav bar for the site. Finally we wrote two tests, one test for the home page and one test for the about page. Both tests passed.","title":"Summary"},{"location":"part4_about_page_and_bootstrap/#future-work","text":"Next, we need to build a user app into our django project. The user app will create functionality to allow users to register and login to the site. Eventually these logged-in users will have access to modify the transfer equivalencies.","title":"Future Work"},{"location":"part5_user_model/","text":"Summary: This is the fifth part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges who want to transfer to 4-year Universities. The transfer web app will show which classes from their Community College Engineering program will transfer to which classes in a 4-year University Engineering program. In this fifth post, we'll build a user model that will allow us to add new users, allow users to login, and allow users to logout. We'll test this user model with the Django admin. What is a user model? What do users need to be able to do? Transfer App site privileges Transfer App user actions Create the users app Create a user model Add user app to list of installed apps Create the users model in the users app Create a users form in users/forms.py Add user creation and user change forms to the Django admin Make migrations and migrate Create a super user at the command line Start the local server and log into the Django Admin Create users with the django admin Mondify the user app admin.py to include the fields 'job' and 'university' Summary Future Work What is a user model? The Oregon Transfer App has two purposes. The first purpose is to be a website that Community College students can use to see which classes at their Community College transfer to a specific 4-year University in Oregon. The second purpose is to be a place where administrators at 4-year Universities can post transfer class equivalencies. The 4-year University administrators set which classes transfer, and the students see which classes transfer. We need to build a user model so that the 4-year university administrators can login, then build and modify transfer equavalencies. Students (or any other user) will not have to login to see which classes transfer. Students (or any other regular user) will not have the ability to set which classes transfer, just see which classes transfer. So a user model for the 4-year University administrators is needed. What do users need to be able to do? The 4-year University administrators need to be able to do a couple things: Transfer App site privileges log into the Transfer App website Create a new 4-year University Classes and edit classes at their 4-year University Create and edit classes at 2-year Community Colleges Create and edit which community College Classes are equivalent to which University classes Transfer App user actions Create a new user, set username and password Log in Log out Reset password Retrieve forgetten password Maybe set and update a profile? We'll build some of these Transfer App user actions in this post. Create the users app At the Anaconda Prompt activate the (transfer) virtual environment and run the startapp command to create a new Django app in our Django project. We already have a pages app in our project. Now we need to add a users app to the project. > cd tranfer_project # make sure you are in the project base directory > conda activate transfer (transfer)> python manage.py startapp users Create a user model There are a couple steps needed to get our user model working. We need to update the project settings.py file so that our user app is included in the list of install apps. Then we'll create the user model in our users app. Add user app to list of installed apps Now we'll add our user app to the list of installed apps. To do this, we need to edit the settings.py file in the overall transfer_project folder. # transfer_project/settings.py # Application definition INSTALLED_APPS = [ # project specific 'pages.apps.PagesConfig', 'users.apps.UsersConfig', # django 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd party ] Also define the AUTH_USER_MODEL in the same settings.py file # transfer_project/settings.py AUTH_USER_MODEL = 'users.CustomUser' Create the users model in the users app Now we need to create the users model in the users app. Add a new CustomUser class derived from the AbstractUser base class in the users/models.py file # users/models.pyu from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): university = models.CharField(CharField.max_length=30, null='', blank=True) job = models.CharField(CharField.max_length=30, null='', blank=True) Create a users form in users/forms.py Now we need to create a form in the users app forms.py file. This form will allow new users to be created and exiting users to change. # users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): model = CustomUser fields = UserCreationForm.Meta.fields + ('university','job',) class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields Add user creation and user change forms to the Django admin In order to use the Django admin to add and modify users, we need to add our user creation form and add our user change form to the users/admin.py file. # users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm model = CustomUser admin.site.register(CustomUser,CustomUserAdmin) Make migrations and migrate We made changes to the database, so before we start the local server and see if our user model works, we need to makemigrations and migrate the database changes. (transfer)> python manage.py makemigrations users (transfer)> python manage.py migrate I had problems with this command and was returned the error django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database 'default' Running the command below didn't solve the problem. python manage.py makemigrations --merge Commenting out the django.admin app from the list of installed apps didn't work either. # transfer_project/settings.py # django #'django.contrib.admin', 'django.contrib.auth', I also tried deleting the users.0001_initial.py file from the user app migrations folder. That worked for the makemigrations step, but it didn't work for the migrate step. The thing that eventually worked was deleting the db.sqlite3 file in the base project directory and then running the commands again. (transfer)> python manage.py makemigrations users (transfer)> python manage.py migrate Running makemigrations and migtrate created a new db.sqlite3 file and seems to work. Once users are created, this is obviously a poor solution. We don't want to erase the entire database each time we make a change to the app, but erasing the database worked to solve the problem right now. Create a super user at the command line We need to create a super user at the command line so that we can log into the Django admin. With no users set up yet, there is no way to log into the Django admin and see if our user model works. (transfer) > python manage.py createsuperuser You'll be asked for a username, email address and password. Note that the email address we use has to be different from the email address that will eventually be used with the email service. Start the local server and log into the Django Admin Now let's see if our user model worked. Run the Django project locally with: (transfer)> python manage.py runserver Open up a web browser and browse to: http://localhost:8000/admin The Django admin looks something like below. Log in with the new superuser username and password that we just set up. After logging in with the superuser credentials, the Django admin dashboard pops up. Create users with the django admin Using the Django admin dashboard, create a new user by clicking the [+user] button. Mondify the user app admin.py to include the fields 'job' and 'university' We can only see USERNAME, EMAIL ADDRESS, FIRST NAME, LAST NAME, and STAFF STATUS when we look at the Django admin pannel. Our custom fields 'university' and 'job' are not shown. To make these show up, we need to modify the /users/admin.py file and include a list_disply of all the fields we want shown. # users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm model = CustomUser list_display = ['username','email','university','job','is_staff'] admin.site.register(CustomUser,CustomUserAdmin) Restart the server with (transfer)> python manage.py runserver Browse to the user dashboard and see the new fields presented. Summary That was a ton of work, but we got the new user model working. We created the users app, added a user model to the users app and then incorporated the user model into the Django admin. Then we ran the Django admin and created a new user. Finally we modified the users/admin.py file so that we could see our custom fields 'university' and 'job' listed on the Django admin users pannel Future Work Next, we'll incorporate a way for users to log in. We have the ability to create new users through the Django admin pannel. Now we need a way for those users to log in and out of the site.","title":"Oregon Engineering College Transfer App - Part 5: User Model"},{"location":"part5_user_model/#what-is-a-user-model","text":"The Oregon Transfer App has two purposes. The first purpose is to be a website that Community College students can use to see which classes at their Community College transfer to a specific 4-year University in Oregon. The second purpose is to be a place where administrators at 4-year Universities can post transfer class equivalencies. The 4-year University administrators set which classes transfer, and the students see which classes transfer. We need to build a user model so that the 4-year university administrators can login, then build and modify transfer equavalencies. Students (or any other user) will not have to login to see which classes transfer. Students (or any other regular user) will not have the ability to set which classes transfer, just see which classes transfer. So a user model for the 4-year University administrators is needed.","title":"What is a user model?"},{"location":"part5_user_model/#what-do-users-need-to-be-able-to-do","text":"The 4-year University administrators need to be able to do a couple things:","title":"What do users need to be able to do?"},{"location":"part5_user_model/#transfer-app-site-privileges","text":"log into the Transfer App website Create a new 4-year University Classes and edit classes at their 4-year University Create and edit classes at 2-year Community Colleges Create and edit which community College Classes are equivalent to which University classes","title":"Transfer App site privileges"},{"location":"part5_user_model/#transfer-app-user-actions","text":"Create a new user, set username and password Log in Log out Reset password Retrieve forgetten password Maybe set and update a profile? We'll build some of these Transfer App user actions in this post.","title":"Transfer App user actions"},{"location":"part5_user_model/#create-the-users-app","text":"At the Anaconda Prompt activate the (transfer) virtual environment and run the startapp command to create a new Django app in our Django project. We already have a pages app in our project. Now we need to add a users app to the project. > cd tranfer_project # make sure you are in the project base directory > conda activate transfer (transfer)> python manage.py startapp users","title":"Create the users app"},{"location":"part5_user_model/#create-a-user-model","text":"There are a couple steps needed to get our user model working. We need to update the project settings.py file so that our user app is included in the list of install apps. Then we'll create the user model in our users app.","title":"Create a user model"},{"location":"part5_user_model/#add-user-app-to-list-of-installed-apps","text":"Now we'll add our user app to the list of installed apps. To do this, we need to edit the settings.py file in the overall transfer_project folder. # transfer_project/settings.py # Application definition INSTALLED_APPS = [ # project specific 'pages.apps.PagesConfig', 'users.apps.UsersConfig', # django 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # 3rd party ] Also define the AUTH_USER_MODEL in the same settings.py file # transfer_project/settings.py AUTH_USER_MODEL = 'users.CustomUser'","title":"Add user app to list of installed apps"},{"location":"part5_user_model/#create-the-users-model-in-the-users-app","text":"Now we need to create the users model in the users app. Add a new CustomUser class derived from the AbstractUser base class in the users/models.py file # users/models.pyu from django.contrib.auth.models import AbstractUser from django.db import models class CustomUser(AbstractUser): university = models.CharField(CharField.max_length=30, null='', blank=True) job = models.CharField(CharField.max_length=30, null='', blank=True)","title":"Create the users model in the users app"},{"location":"part5_user_model/#create-a-users-form-in-usersformspy","text":"Now we need to create a form in the users app forms.py file. This form will allow new users to be created and exiting users to change. # users/forms.py from django import forms from django.contrib.auth.forms import UserCreationForm, UserChangeForm from .models import CustomUser class CustomUserCreationForm(UserCreationForm): model = CustomUser fields = UserCreationForm.Meta.fields + ('university','job',) class CustomUserChangeForm(UserChangeForm): class Meta: model = CustomUser fields = UserChangeForm.Meta.fields","title":"Create a users form in users/forms.py"},{"location":"part5_user_model/#add-user-creation-and-user-change-forms-to-the-django-admin","text":"In order to use the Django admin to add and modify users, we need to add our user creation form and add our user change form to the users/admin.py file. # users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm model = CustomUser admin.site.register(CustomUser,CustomUserAdmin)","title":"Add user creation and user change forms to the Django admin"},{"location":"part5_user_model/#make-migrations-and-migrate","text":"We made changes to the database, so before we start the local server and see if our user model works, we need to makemigrations and migrate the database changes. (transfer)> python manage.py makemigrations users (transfer)> python manage.py migrate I had problems with this command and was returned the error django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database 'default' Running the command below didn't solve the problem. python manage.py makemigrations --merge Commenting out the django.admin app from the list of installed apps didn't work either. # transfer_project/settings.py # django #'django.contrib.admin', 'django.contrib.auth', I also tried deleting the users.0001_initial.py file from the user app migrations folder. That worked for the makemigrations step, but it didn't work for the migrate step. The thing that eventually worked was deleting the db.sqlite3 file in the base project directory and then running the commands again. (transfer)> python manage.py makemigrations users (transfer)> python manage.py migrate Running makemigrations and migtrate created a new db.sqlite3 file and seems to work. Once users are created, this is obviously a poor solution. We don't want to erase the entire database each time we make a change to the app, but erasing the database worked to solve the problem right now.","title":"Make migrations and migrate"},{"location":"part5_user_model/#create-a-super-user-at-the-command-line","text":"We need to create a super user at the command line so that we can log into the Django admin. With no users set up yet, there is no way to log into the Django admin and see if our user model works. (transfer) > python manage.py createsuperuser You'll be asked for a username, email address and password. Note that the email address we use has to be different from the email address that will eventually be used with the email service.","title":"Create a super user at the command line"},{"location":"part5_user_model/#start-the-local-server-and-log-into-the-django-admin","text":"Now let's see if our user model worked. Run the Django project locally with: (transfer)> python manage.py runserver Open up a web browser and browse to: http://localhost:8000/admin The Django admin looks something like below. Log in with the new superuser username and password that we just set up. After logging in with the superuser credentials, the Django admin dashboard pops up.","title":"Start the local server and log into the Django Admin"},{"location":"part5_user_model/#create-users-with-the-django-admin","text":"Using the Django admin dashboard, create a new user by clicking the [+user] button.","title":"Create users with the django admin"},{"location":"part5_user_model/#mondify-the-user-app-adminpy-to-include-the-fields-job-and-university","text":"We can only see USERNAME, EMAIL ADDRESS, FIRST NAME, LAST NAME, and STAFF STATUS when we look at the Django admin pannel. Our custom fields 'university' and 'job' are not shown. To make these show up, we need to modify the /users/admin.py file and include a list_disply of all the fields we want shown. # users/admin.py from django.contrib import admin from django.contrib.auth.admin import UserAdmin from .forms import CustomUserCreationForm, CustomUserChangeForm from .models import CustomUser class CustomUserAdmin(UserAdmin): add_form = CustomUserCreationForm form = CustomUserChangeForm model = CustomUser list_display = ['username','email','university','job','is_staff'] admin.site.register(CustomUser,CustomUserAdmin) Restart the server with (transfer)> python manage.py runserver Browse to the user dashboard and see the new fields presented.","title":"Mondify the user app admin.py to include the fields 'job' and 'university'"},{"location":"part5_user_model/#summary","text":"That was a ton of work, but we got the new user model working. We created the users app, added a user model to the users app and then incorporated the user model into the Django admin. Then we ran the Django admin and created a new user. Finally we modified the users/admin.py file so that we could see our custom fields 'university' and 'job' listed on the Django admin users pannel","title":"Summary"},{"location":"part5_user_model/#future-work","text":"Next, we'll incorporate a way for users to log in. We have the ability to create new users through the Django admin pannel. Now we need a way for those users to log in and out of the site.","title":"Future Work"},{"location":"part6_user_login/","text":"This is the 6th part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges who want to transfer to 4-year Universities. The transfer web app will show which classes from their Community College Engineering program will transfer to which classes in a 4-year University Engineering program. In this sixth post, add a way for users to log into the site. Who is going to log in and out? Install django-crispy-forms Add django-crispy-forms to the list of installed apps in settings.py Add a login template Modify project urls Modify the nav template to include the login url Run the local server and login Build tests for login page Summary Future Work Who is going to log in and out? 4-year University administrators need to be able to log in and out of the site. The 4-year University administrators need to be able to log in so that they can post which classes at a Community College transfer to which classes at their 4-year University. Administrators at other Universities will be able to do the same, but only for class equivalences at their University. Install django-crispy-forms To help with the forms part of the login and logout pages, we'll use a Python package called django-crispy-forms. This package will help use build the login form and give some bootstrap4 styling to the form. We have bootstrap styling on the rest of the site on the home and about pages, so having bootstrap styling on the login page too helps keep the look of the site consistant. To install django-crispy-forms, we can use the Anaconda prompt and install from the conda-forge channel. Make sure to intall django-crisp-forms into the (transfer) virtual environment. > conda activate transfer (transfer) > conda install -c conda-forge django-crispy-forms Add django-crispy-forms to the list of installed apps in settings.py Now that django-crispy-forms is installed, we need to include the package in our list of installed apps in transfer_project/settings.py. We will also include CRISPY_TEMPLATE_PACK = 'bootstrap4' at the bottom of the setting.py file to notify the crispy forms app to use bootstrap4 styling. # transfer_project/settings.py INSTALLED_APPS = [ # project specific 'pages.apps.PagesConfig', 'users.apps.UsersConfig', # 3rd party 'crispy_forms', # django 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... CRISPY_TEMPLATE_PACK = 'bootstrap4' ... Add a login template We need to build a login page so the Univeristy administrators can log in and out. First we'll build a login template. Let's put this tempate in the templates/users directory. The directory strucutre of the entire Django project is below: \u251c\u2500\u2500\u2500pages \u2502 \u251c\u2500\u2500\u2500migrations \u2502 \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2502 \u251c\u2500\u2500\u2500static \u2502 \u2502 \u2514\u2500\u2500\u2500css \u2502 \u2514\u2500\u2500\u2500__pycache__ \u251c\u2500\u2500\u2500templates \u2502 \u251c\u2500\u2500\u2500registration \u2502 \u2514\u2500\u2500\u2500users \u251c\u2500\u2500\u2500transfer_project \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2514\u2500\u2500\u2500users In the templates/users/login.html template below, notice how we include the tag {% load crispy_forms_tags %} . Within the body of the form, we also include the tag {{ form|crispy }} . <!-- templates/users/login.html --> {% extends 'bootstrap_base.html' %} {% load crispy_forms_tags %} {% block content %} <div class=\"jumbotron\"> <div class=\"content-section\"> <form method=\"POST\"> {% csrf_token %} <fieldset class=\"form-group\"> <legend class=\"border-bottom mb-4\"><h1>Log In</h1></legend> {{ form|crispy }} </fieldset> <div class=\"form-group\"> <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button> </div> </form> <div class=\"border-top pt-3\"> <small class=\"text-muted\"> Need An Account? <a class=\"ml-2\" href=\"{% url 'home' %}\">Sign Up Now</a> </small> </div> </div> </div> {% endblock content %} Modify project urls Now that the login template is created, we need to create a url pattern that points to the template. When a user browses to https://domain.com/login, the login template should pop up. Edit the transfer_project/urls.py file to include a new route for the login template. We'll use Djangos build in django.contrib.auth.views.LoginView as the view function. Note the import line from django.contrib.auth import views as auth_views . There are going to end up being a lot of functions in this urls.py file with the name views , so we create the alias auth_views to prevent function name duplication. # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), path('', include('pages.urls')), ] Modify the nav template to include the login url We have a login template, a login url and a login view. What we need now is a link on the site for users to click so they can find the login page. Let's put the login link as part of our navigation bar in the page header. We need to modify the nav.html template link the login page with the login menu button in the page nav. Note the tag: <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> . This tag provides the link to our login page. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> Run the local server and login Start the local server with: (transfer) > python manage.py runserver Browse to http://localhost:8000 and select the [Administrators] dropdown from the navigation bar at the top of the page. Click the [Login] link. The login page should look something like this: Login with the superuser username and password we created earlier. Problem is, when we click [Login], we get a Page not found error. Django is trying to direct us to the accounts/profile url, but this page doesn't exist. For right now, let's direct users back to the homepage when they login. We can specify where users go after they login by specifying LOGIN_REDIRECT_URL = in our transfer_project/settings.py file. At the bottom of the settings.py file, include the extra two lines at the bottom below the CRISPY_TEMPLATE_PACK line. # transfer_project/settings.py ... CRISPY_TEMPLATE_PACK = 'bootstrap4' LOGIN_REDIRECT_URL = 'home' LOGIN_URL = 'login' Now go back to the login page, log in again and see we are directed back to the homepage. Build tests for login page Since we have two new pages, we need to write some new tests. We already have a couple tests. There is a test for the homepage and a test for the about page. We can improve these tests by adding an assertTemplateUsed() test for both pages. # pages/tests.py from django.test import SimpleTestCase, TestCase class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_home_view_uses_correct_template(self): response = self.client.get(reverse('home') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class AboutPageTests(SimpleTestCase): def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) def test_about_view_uses_correct_template(self): response = self.client.get(reverse('about') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'about.html') class LoginPageTests(SimpleTestCase): def test_login_page_status_code(self): response = self.client.get('/logout/') self.assertEqual(response.status_code, 200) def test_login_view_uses_correct_template(self): response = self.client.get(reverse('logout') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/users/login.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test Everything passes! Great. Another part of the Django project down. Summary In this post we created a user login page template and and view. We installed and used django-crispy-forms to help with the login page style and functionality. We added a link to the login page to our nav bar at the top of the site. We logged into the site with our superuser user name and password and then specified the homepage as the landing site after users login. Future Work Next, we'll build a way for users to logout. We'll also add a visual indication in the nav bar to show users that they are logged in and provide a link for them to logout. We also will build a logout landing page that results after users successfully logout.","title":"Oregon Engineering College Transfer App - Part 6: User Login"},{"location":"part6_user_login/#who-is-going-to-log-in-and-out","text":"4-year University administrators need to be able to log in and out of the site. The 4-year University administrators need to be able to log in so that they can post which classes at a Community College transfer to which classes at their 4-year University. Administrators at other Universities will be able to do the same, but only for class equivalences at their University.","title":"Who is going to log in and out?"},{"location":"part6_user_login/#install-django-crispy-forms","text":"To help with the forms part of the login and logout pages, we'll use a Python package called django-crispy-forms. This package will help use build the login form and give some bootstrap4 styling to the form. We have bootstrap styling on the rest of the site on the home and about pages, so having bootstrap styling on the login page too helps keep the look of the site consistant. To install django-crispy-forms, we can use the Anaconda prompt and install from the conda-forge channel. Make sure to intall django-crisp-forms into the (transfer) virtual environment. > conda activate transfer (transfer) > conda install -c conda-forge django-crispy-forms","title":"Install django-crispy-forms"},{"location":"part6_user_login/#add-django-crispy-forms-to-the-list-of-installed-apps-in-settingspy","text":"Now that django-crispy-forms is installed, we need to include the package in our list of installed apps in transfer_project/settings.py. We will also include CRISPY_TEMPLATE_PACK = 'bootstrap4' at the bottom of the setting.py file to notify the crispy forms app to use bootstrap4 styling. # transfer_project/settings.py INSTALLED_APPS = [ # project specific 'pages.apps.PagesConfig', 'users.apps.UsersConfig', # 3rd party 'crispy_forms', # django 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ... CRISPY_TEMPLATE_PACK = 'bootstrap4' ...","title":"Add django-crispy-forms to the list of installed apps in settings.py"},{"location":"part6_user_login/#add-a-login-template","text":"We need to build a login page so the Univeristy administrators can log in and out. First we'll build a login template. Let's put this tempate in the templates/users directory. The directory strucutre of the entire Django project is below: \u251c\u2500\u2500\u2500pages \u2502 \u251c\u2500\u2500\u2500migrations \u2502 \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2502 \u251c\u2500\u2500\u2500static \u2502 \u2502 \u2514\u2500\u2500\u2500css \u2502 \u2514\u2500\u2500\u2500__pycache__ \u251c\u2500\u2500\u2500templates \u2502 \u251c\u2500\u2500\u2500registration \u2502 \u2514\u2500\u2500\u2500users \u251c\u2500\u2500\u2500transfer_project \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2514\u2500\u2500\u2500users In the templates/users/login.html template below, notice how we include the tag {% load crispy_forms_tags %} . Within the body of the form, we also include the tag {{ form|crispy }} . <!-- templates/users/login.html --> {% extends 'bootstrap_base.html' %} {% load crispy_forms_tags %} {% block content %} <div class=\"jumbotron\"> <div class=\"content-section\"> <form method=\"POST\"> {% csrf_token %} <fieldset class=\"form-group\"> <legend class=\"border-bottom mb-4\"><h1>Log In</h1></legend> {{ form|crispy }} </fieldset> <div class=\"form-group\"> <button class=\"btn btn-lg btn-success\" type=\"submit\">Login</button> </div> </form> <div class=\"border-top pt-3\"> <small class=\"text-muted\"> Need An Account? <a class=\"ml-2\" href=\"{% url 'home' %}\">Sign Up Now</a> </small> </div> </div> </div> {% endblock content %}","title":"Add a login template"},{"location":"part6_user_login/#modify-project-urls","text":"Now that the login template is created, we need to create a url pattern that points to the template. When a user browses to https://domain.com/login, the login template should pop up. Edit the transfer_project/urls.py file to include a new route for the login template. We'll use Djangos build in django.contrib.auth.views.LoginView as the view function. Note the import line from django.contrib.auth import views as auth_views . There are going to end up being a lot of functions in this urls.py file with the name views , so we create the alias auth_views to prevent function name duplication. # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), path('', include('pages.urls')), ]","title":"Modify project urls"},{"location":"part6_user_login/#modify-the-nav-template-to-include-the-login-url","text":"We have a login template, a login url and a login view. What we need now is a link on the site for users to click so they can find the login page. Let's put the login link as part of our navigation bar in the page header. We need to modify the nav.html template link the login page with the login menu button in the page nav. Note the tag: <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> . This tag provides the link to our login page. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav>","title":"Modify the nav template to include the login url"},{"location":"part6_user_login/#run-the-local-server-and-login","text":"Start the local server with: (transfer) > python manage.py runserver Browse to http://localhost:8000 and select the [Administrators] dropdown from the navigation bar at the top of the page. Click the [Login] link. The login page should look something like this: Login with the superuser username and password we created earlier. Problem is, when we click [Login], we get a Page not found error. Django is trying to direct us to the accounts/profile url, but this page doesn't exist. For right now, let's direct users back to the homepage when they login. We can specify where users go after they login by specifying LOGIN_REDIRECT_URL = in our transfer_project/settings.py file. At the bottom of the settings.py file, include the extra two lines at the bottom below the CRISPY_TEMPLATE_PACK line. # transfer_project/settings.py ... CRISPY_TEMPLATE_PACK = 'bootstrap4' LOGIN_REDIRECT_URL = 'home' LOGIN_URL = 'login' Now go back to the login page, log in again and see we are directed back to the homepage.","title":"Run the local server and login"},{"location":"part6_user_login/#build-tests-for-login-page","text":"Since we have two new pages, we need to write some new tests. We already have a couple tests. There is a test for the homepage and a test for the about page. We can improve these tests by adding an assertTemplateUsed() test for both pages. # pages/tests.py from django.test import SimpleTestCase, TestCase class HomePageTests(SimpleTestCase): def test_home_page_status_code(self): response = self.client.get('/') self.assertEqual(response.status_code, 200) def test_home_view_uses_correct_template(self): response = self.client.get(reverse('home') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'home.html') class AboutPageTests(SimpleTestCase): def test_about_page_status_code(self): response = self.client.get('/about/') self.assertEqual(response.status_code, 200) def test_about_view_uses_correct_template(self): response = self.client.get(reverse('about') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, 'about.html') class LoginPageTests(SimpleTestCase): def test_login_page_status_code(self): response = self.client.get('/logout/') self.assertEqual(response.status_code, 200) def test_login_view_uses_correct_template(self): response = self.client.get(reverse('logout') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/users/login.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test Everything passes! Great. Another part of the Django project down.","title":"Build tests for login page"},{"location":"part6_user_login/#summary","text":"In this post we created a user login page template and and view. We installed and used django-crispy-forms to help with the login page style and functionality. We added a link to the login page to our nav bar at the top of the site. We logged into the site with our superuser user name and password and then specified the homepage as the landing site after users login.","title":"Summary"},{"location":"part6_user_login/#future-work","text":"Next, we'll build a way for users to logout. We'll also add a visual indication in the nav bar to show users that they are logged in and provide a link for them to logout. We also will build a logout landing page that results after users successfully logout.","title":"Future Work"},{"location":"part7_user_logout/","text":"This is the 7th part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges who want to transfer to 4-year Universities. The transfer web app will show which classes from their Community College Engineering program will transfer to which classes in a 4-year University Engineering program. In this seventh post, add a way for users to log out of the site. Will will also build a visual indicator into the navbar to show when a user is logged in, and give them a link in the nav bar that gives them an option to logout. Why do users need to be able to logout? Create a logout template Modify project urls Modify the nav template to include logout functionality Run the local server and login Show user logged in status in nav bar Run the local server to see the results Build tests for logout pages Summary Future Work Why do users need to be able to logout? 4-year University administrators need to be able to log in and out of the site. The 4-year University administrators need to be able to log in so that they can post which classes at a Community College transfer to which classes at their 4-year University. Once the 4-year University Administrators make changes, they need to be able to log out and then act like regular site users (see the same view that students see) to see their changes in effect. It is also good security practice to allow users to logout before then exit the site. Create a logout template We need to build a logout page so the Univeristy administrators can logout (after they login). To create the logout functionality, first we'll build a new logout.html template. Let's put the logout.html tempate in the templates/users directory. The directory strucutre of the entire Django project is below: \u251c\u2500\u2500\u2500pages \u2502 \u251c\u2500\u2500\u2500migrations \u2502 \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2502 \u251c\u2500\u2500\u2500static \u2502 \u2502 \u2514\u2500\u2500\u2500css \u2502 \u2514\u2500\u2500\u2500__pycache__ \u251c\u2500\u2500\u2500templates \u2502 \u251c\u2500\u2500\u2500registration \u2502 \u2514\u2500\u2500\u2500users \u2502 \u251c\u2500\u2500\u2500login.html \u2502 \u2514\u2500\u2500\u2500logout.html \u251c\u2500\u2500\u2500transfer_project \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2514\u2500\u2500\u2500users In the templates/users/logout.html template below, notice how we include the tag {% url 'login' %} so that users can back in again if they want to. <!-- templates/users/logout.html --> {% extends 'bootstrap_base.html' %} {% block content %} <h2>You have been logged out</h2> <div class=\"border-top pt-3\"> <small class=\"text-muted\"> <a href=\"{% url 'login' %}\">Log In Again</a> </small> </div> {% endblock content %} Modify project urls Now that the logout template is created, we need to create a url pattern that points to the template. When a user browses to https://domain.com/logout, the logout template should pop up. Edit the transfer_project/urls.py file to include a new route for the logout template. We'll use Djangos build in django.contrib.auth.views.LogoutView as the view function. This view is very similar to to Django's built-in LoginView. # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'), path('', include('pages.urls')), ] Modify the nav template to include logout functionality We have a logout template, a logout url and a logout view. What we need now is a link on the site for users to click so they can actually logout. Let's put the logout link as part of our navigation bar in the page header. We need to modify the nav.html template to accomplish this. Note the tag: <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> . This tag provides the link to our login page. But when a user is logged in, we want the menu item to show Logout . Django has built in functionality to help with this. The general structure to change the menu nav menu item depending on if a user is logged in or out is below. Note the user.is_authenticated property. user.is_authenticated is built into Django. If a user is logged in, user.is_authenticated returns True . If a user is not logged in user.is_authenticated returns false. {% if user.is_authenticated %} <code> {% else %} <code> {% endif %} Let's add the user.is_authenticated functionality to the templates/nav.html template. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> {% if user.is_authenticated %} <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> {% else %} <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> {% endif %} <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav> Run the local server and login Start the local server with: (transfer) > python manage.py runserver Browse to http://localhost:8000 and select the [Administrators] dropdown from the navigation bar at the top of the page. Click the [Login] link. The login page should look something like this: Login with the superuser username and password we created earlier. After we login, we are directed back to the homepage. Now that we are logged in, if we click the [Administrators] nav menu item, we see an option to logout (where as before we saw an option to login). Cool! If we click [Logout], we are directed to the logout page: If we click the [Log in Again] link, we are directed back to the login page Neat. Show user logged in status in nav bar Now let's build a way to show users that they are logged in. Right now, you have to click the [Administrators] link and see if Login or Logout is an option. This is the only way for a user to tell if they are logged in or logged out. We also want to provide a way for users to see their username, modify their profile, change their password and see their 4-year university's dashboard. I think we can fit all of this into the nav bar using some templating logic, but it's a lot for one template. So let's break up the functionality into a couple templates. A chunck of html tags are rendered if the user is logged in and a chuck of html tags are rendered if the user is logged out. First modify the templates/nav.html template to include logic that shows different things in the nav bar depending on if a user is logged in or logged out. Note the {% include ' ' %} tag. These are the sections of html we need to write in different files. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> {% if user.is_authenticated %} <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> {% else %} <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> {% endif %} <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> {% if user.is_authenticated %} {% include 'logged_in_nav_dropdown.html' %} {% else %} {% include 'login_nav_button.html' %} {% endif %} </div> </nav> Now we need to build the two templates we just specified in the nav.html template: logged_in_nav.html and login_nav_button.html <!-- templates/logged_in_nav_dropdown.html --> <ul class=\"nav justify-content-end\"> <li class=\"nav-item dropdown\"> <a class=\"btn btn-secondary dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Logged in as: {{ user.username }}</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> <a class=\"dropdown-item\" href=\"#\">Administrator Dashboard</a> <a class=\"dropdown-item\" href=\"#\">Profile</a> <a class=\"dropdown-item\" href=\"#\">Change Password</a> </div> </li> </ul> Now the template that shows the login button (if the user is not logged in). <!-- templates/login_nav_button.html --> <ul class=\"navbar-nav justify-content-end\"> <li class=\"nav-item active\"> <a class=\"btn btn-secondary\" href=\"{% url 'login' %}\">Login<span class=\"sr-only\">(current)</span></a> </li> </ul> Run the local server to see the results OK. Coding for logging in and out is complete. Let's see the results. Run the local server and login and log out with the nav buttons. (transfer) > python manage.py runserver When the user is not logged in, the page looks like: If we click the [Login] button on the upper right, we are brought to the login screen After we log in, we are taken back to the homepage, but now the menu in the upper right shows our user name and has some additional options. If will click [logout] from the drop down menu, we are brought back to log out screen and the button in the upper right has gone back to a login button. Awesome! Build tests for logout pages Since we have a new page, we need to write some new tests. We already have a couple tests. There is a test for the homepage, about page and login page. We can improve our test coverage by adding tests for the logout page. # pages/tests.py ... class LogoutPageTests(SimpleTestCase): def test_logout_page_status_code(self): response = self.client.get('/logout/') self.assertEqual(response.status_code, 200) def test_about_view_uses_correct_template(self): response = self.client.get(reverse('logout') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/users/logout.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test Summary In this post we created a logout template and and view. We changed the functionality of the nav bar to show different items depending on if we are logged out or logged in. We see a login button if we are logged out, and we see our username with a drop down menu if we are logged in. Future Work Next, we'll build a profile page for users to specify and modify their user profile. Things we want to include on the profile page are username, email, university and job. We want to provide a way for the user to change and modify these options.","title":"Oregon Engineering College Transfer App - Part 7: User Logout"},{"location":"part7_user_logout/#why-do-users-need-to-be-able-to-logout","text":"4-year University administrators need to be able to log in and out of the site. The 4-year University administrators need to be able to log in so that they can post which classes at a Community College transfer to which classes at their 4-year University. Once the 4-year University Administrators make changes, they need to be able to log out and then act like regular site users (see the same view that students see) to see their changes in effect. It is also good security practice to allow users to logout before then exit the site.","title":"Why do users need to be able to logout?"},{"location":"part7_user_logout/#create-a-logout-template","text":"We need to build a logout page so the Univeristy administrators can logout (after they login). To create the logout functionality, first we'll build a new logout.html template. Let's put the logout.html tempate in the templates/users directory. The directory strucutre of the entire Django project is below: \u251c\u2500\u2500\u2500pages \u2502 \u251c\u2500\u2500\u2500migrations \u2502 \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2502 \u251c\u2500\u2500\u2500static \u2502 \u2502 \u2514\u2500\u2500\u2500css \u2502 \u2514\u2500\u2500\u2500__pycache__ \u251c\u2500\u2500\u2500templates \u2502 \u251c\u2500\u2500\u2500registration \u2502 \u2514\u2500\u2500\u2500users \u2502 \u251c\u2500\u2500\u2500login.html \u2502 \u2514\u2500\u2500\u2500logout.html \u251c\u2500\u2500\u2500transfer_project \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2514\u2500\u2500\u2500users In the templates/users/logout.html template below, notice how we include the tag {% url 'login' %} so that users can back in again if they want to. <!-- templates/users/logout.html --> {% extends 'bootstrap_base.html' %} {% block content %} <h2>You have been logged out</h2> <div class=\"border-top pt-3\"> <small class=\"text-muted\"> <a href=\"{% url 'login' %}\">Log In Again</a> </small> </div> {% endblock content %}","title":"Create a logout template"},{"location":"part7_user_logout/#modify-project-urls","text":"Now that the logout template is created, we need to create a url pattern that points to the template. When a user browses to https://domain.com/logout, the logout template should pop up. Edit the transfer_project/urls.py file to include a new route for the logout template. We'll use Djangos build in django.contrib.auth.views.LogoutView as the view function. This view is very similar to to Django's built-in LoginView. # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'), path('', include('pages.urls')), ]","title":"Modify project urls"},{"location":"part7_user_logout/#modify-the-nav-template-to-include-logout-functionality","text":"We have a logout template, a logout url and a logout view. What we need now is a link on the site for users to click so they can actually logout. Let's put the logout link as part of our navigation bar in the page header. We need to modify the nav.html template to accomplish this. Note the tag: <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> . This tag provides the link to our login page. But when a user is logged in, we want the menu item to show Logout . Django has built in functionality to help with this. The general structure to change the menu nav menu item depending on if a user is logged in or out is below. Note the user.is_authenticated property. user.is_authenticated is built into Django. If a user is logged in, user.is_authenticated returns True . If a user is not logged in user.is_authenticated returns false. {% if user.is_authenticated %} <code> {% else %} <code> {% endif %} Let's add the user.is_authenticated functionality to the templates/nav.html template. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> {% if user.is_authenticated %} <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> {% else %} <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> {% endif %} <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> <form class=\"form-inline my-2 my-lg-0\"> <input class=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"> <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button> </form> </div> </nav>","title":"Modify the nav template to include logout functionality"},{"location":"part7_user_logout/#run-the-local-server-and-login","text":"Start the local server with: (transfer) > python manage.py runserver Browse to http://localhost:8000 and select the [Administrators] dropdown from the navigation bar at the top of the page. Click the [Login] link. The login page should look something like this: Login with the superuser username and password we created earlier. After we login, we are directed back to the homepage. Now that we are logged in, if we click the [Administrators] nav menu item, we see an option to logout (where as before we saw an option to login). Cool! If we click [Logout], we are directed to the logout page: If we click the [Log in Again] link, we are directed back to the login page Neat.","title":"Run the local server and login"},{"location":"part7_user_logout/#show-user-logged-in-status-in-nav-bar","text":"Now let's build a way to show users that they are logged in. Right now, you have to click the [Administrators] link and see if Login or Logout is an option. This is the only way for a user to tell if they are logged in or logged out. We also want to provide a way for users to see their username, modify their profile, change their password and see their 4-year university's dashboard. I think we can fit all of this into the nav bar using some templating logic, but it's a lot for one template. So let's break up the functionality into a couple templates. A chunck of html tags are rendered if the user is logged in and a chuck of html tags are rendered if the user is logged out. First modify the templates/nav.html template to include logic that shows different things in the nav bar depending on if a user is logged in or logged out. Note the {% include ' ' %} tag. These are the sections of html we need to write in different files. <!-- templates/nav.html --> <nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\"> <a class=\"navbar-brand\" href=\"#\">Navbar</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"> <span class=\"navbar-toggler-icon\"></span> </button> <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"> <ul class=\"navbar-nav mr-auto\"> <li class=\"nav-item active\"> <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a> </li> <li class=\"nav-item\"> <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a> </li> <li class=\"nav-item dropdown\"> <a class=\"nav-link dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Administrators</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> {% if user.is_authenticated %} <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> {% else %} <a class=\"dropdown-item\" href=\"{% url 'login' %}\">Login</a> {% endif %} <a class=\"dropdown-item\" href=\"#\">View Transfer Equivalencies</a> <a class=\"dropdown-item\" href=\"#\">Modify Transfer Equivalencies</a> </div> </li> </ul> {% if user.is_authenticated %} {% include 'logged_in_nav_dropdown.html' %} {% else %} {% include 'login_nav_button.html' %} {% endif %} </div> </nav> Now we need to build the two templates we just specified in the nav.html template: logged_in_nav.html and login_nav_button.html <!-- templates/logged_in_nav_dropdown.html --> <ul class=\"nav justify-content-end\"> <li class=\"nav-item dropdown\"> <a class=\"btn btn-secondary dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Logged in as: {{ user.username }}</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> <a class=\"dropdown-item\" href=\"#\">Administrator Dashboard</a> <a class=\"dropdown-item\" href=\"#\">Profile</a> <a class=\"dropdown-item\" href=\"#\">Change Password</a> </div> </li> </ul> Now the template that shows the login button (if the user is not logged in). <!-- templates/login_nav_button.html --> <ul class=\"navbar-nav justify-content-end\"> <li class=\"nav-item active\"> <a class=\"btn btn-secondary\" href=\"{% url 'login' %}\">Login<span class=\"sr-only\">(current)</span></a> </li> </ul>","title":"Show user logged in status in nav bar"},{"location":"part7_user_logout/#run-the-local-server-to-see-the-results","text":"OK. Coding for logging in and out is complete. Let's see the results. Run the local server and login and log out with the nav buttons. (transfer) > python manage.py runserver When the user is not logged in, the page looks like: If we click the [Login] button on the upper right, we are brought to the login screen After we log in, we are taken back to the homepage, but now the menu in the upper right shows our user name and has some additional options. If will click [logout] from the drop down menu, we are brought back to log out screen and the button in the upper right has gone back to a login button. Awesome!","title":"Run the local server to see the results"},{"location":"part7_user_logout/#build-tests-for-logout-pages","text":"Since we have a new page, we need to write some new tests. We already have a couple tests. There is a test for the homepage, about page and login page. We can improve our test coverage by adding tests for the logout page. # pages/tests.py ... class LogoutPageTests(SimpleTestCase): def test_logout_page_status_code(self): response = self.client.get('/logout/') self.assertEqual(response.status_code, 200) def test_about_view_uses_correct_template(self): response = self.client.get(reverse('logout') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/users/logout.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test","title":"Build tests for logout pages"},{"location":"part7_user_logout/#summary","text":"In this post we created a logout template and and view. We changed the functionality of the nav bar to show different items depending on if we are logged out or logged in. We see a login button if we are logged out, and we see our username with a drop down menu if we are logged in.","title":"Summary"},{"location":"part7_user_logout/#future-work","text":"Next, we'll build a profile page for users to specify and modify their user profile. Things we want to include on the profile page are username, email, university and job. We want to provide a way for the user to change and modify these options.","title":"Future Work"},{"location":"part8_user_profile/","text":"This is the 8th part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges who want to transfer to 4-year Universities. The transfer web app will show which classes from their Community College Engineering program will transfer to which classes in a 4-year University Engineering program. In this eigth post, we'll add a user profile page that contains user details and a way modify those details. Why have a user profile Create a profile page Modify project urls Modify user app urls Create a class-based profile page view in users/views.py Modify the nav bar so that the profile link goes to the profile page Run the local server to see the results Build tests for profile page Summary Future Work Why have a user profile We want administrators to be able to change their username, email address, job or university. We also want a way for administrators to include some of that information if it isn't part of their profile yet. Create a profile page We need to build a profile page so the Univeristy administrators can see their user details and make changes to their user details. To create the profile page functionality, first we'll build a new profile.html template. Let's put the profile.html tempate in the templates/users directory. The directory strucutre of the entire Django project is below: \u251c\u2500\u2500\u2500pages \u2502 \u251c\u2500\u2500\u2500migrations \u2502 \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2502 \u251c\u2500\u2500\u2500static \u2502 \u2502 \u2514\u2500\u2500\u2500css \u2502 \u2514\u2500\u2500\u2500__pycache__ \u251c\u2500\u2500\u2500templates \u2502 \u251c\u2500\u2500\u2500registration \u2502 \u2514\u2500\u2500\u2500users \u2502 \u251c\u2500\u2500\u2500login.html \u2502 \u251c\u2500\u2500\u2500profile.html \u2502 \u2514\u2500\u2500\u2500logout.html \u251c\u2500\u2500\u2500transfer_project \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2514\u2500\u2500\u2500users In the templates/users/profile.html template below, notice how we include tags for each of the user's details such as username, email, job and university <!-- templates/users/profile.html --> {% extends 'bootstrap_base.html' %} {% block content %} {{ user.username }} {{ user.email }} {{ user.university }} {{ user.job }} {% endblock content %} Modify project urls Now that the user profile template is created, we need to create a url pattern that points to the template. When a user browses to https://domain.com/users/profile, the profile template should pop up. Edit the transfer_project/urls.py file to include a new route for the user profile template. We'll point to the user app's url's from the project url's. The logic to serve the profile page view will come from the user app's urls.py file. # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'), #path('users/', include('users.urls')), path('', include('pages.urls')), ] Modify user app urls Now that the project urls point to the user app urls, we need to modify the user app urls to point to our profile view. # users/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ #path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), #path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'), path('profile/', ProfilePageView.as_view(), name='profile'), ] Create a class-based profile page view in users/views.py #from django.views.generic import DetailView #class ProfilePageView(DetailView): #template_name = 'users/profile.html' # pass some other stuff to the template Modify the nav bar so that the profile link goes to the profile page <!-- templates/logged_in_nav_dropdown.html --> <ul class=\"nav justify-content-end\"> <li class=\"nav-item dropdown\"> <a class=\"btn btn-secondary dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Logged in as: {{ user.username }}</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> <a class=\"dropdown-item\" href=\"#\">Administrator Dashboard</a> <a class=\"dropdown-item\" href=\"{% url 'profile' %}\">Profile</a> <a class=\"dropdown-item\" href=\"#\">Change Password</a> </div> </li> </ul> Run the local server to see the results OK. We should be able to see the profile page now. Let's start the local server, login and browse to the profile page using the dropdown menu on the righthand side of the nav bar. (transfer) > python manage.py runserver When the user is not logged in, the page looks like: If we click the [Login] button on the upper right, we are brought to the login screen After we log in, we are taken back to the homepage, but now the menu in the upper right shows our user name and has some additional options. If will click [Profile] from the drop down menu, we are brought to the profile page. Awesome! Build tests for profile page Since we have a new page, we need to write some new tests. We already have a couple tests. There is a test for the homepage, about page, login page and logoutpage. We can improve our test coverage by adding tests for the new profile page. # pages/tests.py ... class ProfilePageTests(TestCase): def test_profile_page_status_code(self): response = self.client.get('/users/profile/') self.assertEqual(response.status_code, 200) def test_profile_view_uses_correct_template(self): response = self.client.get(reverse('users/profile') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/users/profile.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test The tests passed! Now our Django app has a working profile page. Summary In this post we created a user profile page that shows the users username, email, university and position. Future Work Next, we'll build a way for users to modify their profile and do things like change their username, email address, college and job.","title":"Oregon Engineering College Transfer App - Part 8: User Profile"},{"location":"part8_user_profile/#why-have-a-user-profile","text":"We want administrators to be able to change their username, email address, job or university. We also want a way for administrators to include some of that information if it isn't part of their profile yet.","title":"Why have a user profile"},{"location":"part8_user_profile/#create-a-profile-page","text":"We need to build a profile page so the Univeristy administrators can see their user details and make changes to their user details. To create the profile page functionality, first we'll build a new profile.html template. Let's put the profile.html tempate in the templates/users directory. The directory strucutre of the entire Django project is below: \u251c\u2500\u2500\u2500pages \u2502 \u251c\u2500\u2500\u2500migrations \u2502 \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2502 \u251c\u2500\u2500\u2500static \u2502 \u2502 \u2514\u2500\u2500\u2500css \u2502 \u2514\u2500\u2500\u2500__pycache__ \u251c\u2500\u2500\u2500templates \u2502 \u251c\u2500\u2500\u2500registration \u2502 \u2514\u2500\u2500\u2500users \u2502 \u251c\u2500\u2500\u2500login.html \u2502 \u251c\u2500\u2500\u2500profile.html \u2502 \u2514\u2500\u2500\u2500logout.html \u251c\u2500\u2500\u2500transfer_project \u2502 \u2514\u2500\u2500\u2500__pycache__ \u2514\u2500\u2500\u2500users In the templates/users/profile.html template below, notice how we include tags for each of the user's details such as username, email, job and university <!-- templates/users/profile.html --> {% extends 'bootstrap_base.html' %} {% block content %} {{ user.username }} {{ user.email }} {{ user.university }} {{ user.job }} {% endblock content %}","title":"Create a profile page"},{"location":"part8_user_profile/#modify-project-urls","text":"Now that the user profile template is created, we need to create a url pattern that points to the template. When a user browses to https://domain.com/users/profile, the profile template should pop up. Edit the transfer_project/urls.py file to include a new route for the user profile template. We'll point to the user app's url's from the project url's. The logic to serve the profile page view will come from the user app's urls.py file. # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'), #path('users/', include('users.urls')), path('', include('pages.urls')), ]","title":"Modify project urls"},{"location":"part8_user_profile/#modify-user-app-urls","text":"Now that the project urls point to the user app urls, we need to modify the user app urls to point to our profile view. # users/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ #path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'), #path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'), path('profile/', ProfilePageView.as_view(), name='profile'), ]","title":"Modify user app urls"},{"location":"part8_user_profile/#create-a-class-based-profile-page-view-in-usersviewspy","text":"#from django.views.generic import DetailView #class ProfilePageView(DetailView): #template_name = 'users/profile.html' # pass some other stuff to the template","title":"Create a class-based profile page view in users/views.py"},{"location":"part8_user_profile/#modify-the-nav-bar-so-that-the-profile-link-goes-to-the-profile-page","text":"<!-- templates/logged_in_nav_dropdown.html --> <ul class=\"nav justify-content-end\"> <li class=\"nav-item dropdown\"> <a class=\"btn btn-secondary dropdown-toggle\" href=\"https://example.com\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> Logged in as: {{ user.username }}</a> <div class=\"dropdown-menu\" aria-labelledby=\"dropdown01\"> <a class=\"dropdown-item\" href=\"{% url 'logout' %}\">Logout</a> <a class=\"dropdown-item\" href=\"#\">Administrator Dashboard</a> <a class=\"dropdown-item\" href=\"{% url 'profile' %}\">Profile</a> <a class=\"dropdown-item\" href=\"#\">Change Password</a> </div> </li> </ul>","title":"Modify the nav bar so that the profile link goes to the profile page"},{"location":"part8_user_profile/#run-the-local-server-to-see-the-results","text":"OK. We should be able to see the profile page now. Let's start the local server, login and browse to the profile page using the dropdown menu on the righthand side of the nav bar. (transfer) > python manage.py runserver When the user is not logged in, the page looks like: If we click the [Login] button on the upper right, we are brought to the login screen After we log in, we are taken back to the homepage, but now the menu in the upper right shows our user name and has some additional options. If will click [Profile] from the drop down menu, we are brought to the profile page. Awesome!","title":"Run the local server to see the results"},{"location":"part8_user_profile/#build-tests-for-profile-page","text":"Since we have a new page, we need to write some new tests. We already have a couple tests. There is a test for the homepage, about page, login page and logoutpage. We can improve our test coverage by adding tests for the new profile page. # pages/tests.py ... class ProfilePageTests(TestCase): def test_profile_page_status_code(self): response = self.client.get('/users/profile/') self.assertEqual(response.status_code, 200) def test_profile_view_uses_correct_template(self): response = self.client.get(reverse('users/profile') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/users/profile.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test The tests passed! Now our Django app has a working profile page.","title":"Build tests for profile page"},{"location":"part8_user_profile/#summary","text":"In this post we created a user profile page that shows the users username, email, university and position.","title":"Summary"},{"location":"part8_user_profile/#future-work","text":"Next, we'll build a way for users to modify their profile and do things like change their username, email address, college and job.","title":"Future Work"},{"location":"part9_classes_model/","text":"This is the 9th part of a multi-part series on building a web app with Python and Django. The web app will act as a resource for Engineering students at Oregon Community Colleges who want to transfer to 4-year Universities. The transfer web app will show which classes from their Community College Engineering program will transfer to which classes in a 4-year University Engineering program. In this nineth post, we'll create a new classes model and create a page where 4-year University Administrators can add classes to the site. Why a classes model? Create a courses app Create the courses model Migrate new courses model to the database Add courses model to the Django admin and test Create a courses URL Add a courses URL to the project urls Create a courses View Create a courses template Run the local server to see the results Build tests for courses page Summary Future Work Why a classes model? The purpose of the Oregon Transfer App is to have a website that students can visit to see which classes transfer from Community College Engineering programs to 4-year University Engineering Programs. The classes at the 4-year Universities has to be part of the site. We need to add a way for 4-year University administrators to add, modify and delete classes taught at their University. Create a courses app We need to build a courses app to contain our courses model. New Django apps, which are the components that make up Django projects are created with the manange.py startapp command. $ conda activate transfer (transfer) $ python manage.py startapp courses Now we need to add the new courses app to the list of installed apps in our Django project # transfer_project/settings.py INSTALLED_APPS = [ # project specific \"pages.apps.PagesConfig\", \"users.apps.UsersConfig\", \"courses.apps.CoursesConfig\", # 3rd party \"crispy_forms\", # django \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", ] We'll also add a time zone to the project settings so we can mark a time when each new course is added to the website. # transfer_project/settings.py # Internationalization # https://docs.djangoproject.com/en/2.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"America/Los_Angeles\" Create the courses model Now we need to create the courses model. This is defined within the courses app in the models.py file. Each class has a couple specific properties that we want to keep track of: Course number: Example ENGR114 Course name: Example Engineering Programming Credits: Example 4 Course description: Example A 2nd year engineeirng course for students to learn computer programing to solve engineering problems University name: Example PSU Department name: Example ECS Prereqs: Example ENGR101 and ENGR112 Course outcomes: Example 1. Demonstrate ability to use vectors Course page URL: Example https://pdx.edu/ECE112.html Date added: Example Oct 24, 2018 Added by: Example Kendra Lowry Possibly others? # courses/models.py from django.db import models from django.conf import settings from django.contrib.auth import get_user_model from django.db import models from django.urls import reverse class Course(models.Model): course_number = models.CharField(max_length=10) course_name = models.CharField(max_length=50) college = models.CharField(max_length=30) department = models.CharField(max_length=100) pre_reqs = models.CharField(max_length=50) course_description = models.TextField() course_outcomes = models.TextField() course_URL = models.URLField() date_added = models.DateTimeField(auto_now_add=True) added_by = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) def __str__(self): return f'{self.course_number} {self.course_name} {self.college}' def get_absolute_url(self): return reverse('course_detail', args=[str(self.id)]) Migrate new courses model to the database Now that the courses model is added, we need to migrate the model to the database. (transfer) $ python manage.py makemigrations courses (transfer) $ python manage.py migrate Add courses model to the Django admin and test Now let's add our courses model to the Django admin so that we can test it's functionality. # courses/admin.py from django.contrib import admin from .models import Course admin.site.register(Course) Start the development server and bring up the Django admin. (transfer) $ python manage.py runserver browse to: localhost:8000/admin Login with the superuser account Add a new course with the [+] button Add course details Afer we save the course, we can see the course in the list of courses on the Django admin pannel. We can see the course number, course name and college as we specificed in the courses model Now that the courses model is running and we have a course added, let's add one more course through the Django admin. With two courses added we will be able to see what a course page looks like with more than one course and how we can iterated over the courses to build the courses page. Up next is creating a url route so we have a destination for our course page. Create a courses URL We want to create a url for our courses page. This needs to be accomplished in two steps. First we need to add a url to the over-all project urls, second we need to add a url to the courses app urls Add a courses URL to the project urls We'll add the sub-url /courses to proceed any url's that display course pages. In the project url's, we'll add a url route to go to our courses app url's # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path(\"admin/\", admin.site.urls), path( \"login/\", auth_views.LoginView.as_view(template_name=\"users/login.html\"), name=\"login\", ), path( \"logout/\", auth_views.LogoutView.as_view(template_name=\"users/logout.html\"), name=\"logout\", ), path('courses/', include('courses.urls')), path(\"\", include(\"pages.urls\")), ] Any url that starts with /courses is now routed to the courses app urls. So now we need to modify the courses app urls. Create a new url.py file in the courses app directory. # courses/urls.py from django.urls import path from .views import CourseListView urlpatterns = [ path('', CourseListView.as_view(), name='course_list'), ] We named the CourseListView as the view called when the /courses url is requested. This view needs to be constructed. Create a courses View To create the CourseListView , we'll create a custom class-based view from Django's generic ListView class. We'll assign the view to use the course_list.html template, which we'll put in the tempates/courses directory # courses/views.py from django.shortcuts import render from django.views.generic import ListView from .models import Course class CourseListView(ListView): model = Course template_name = 'courses/course_list.html' Create a courses template Our course list view is pointing to the template ourses/course_list.html so that's the template we'll construct next. We'll use bootstrap cards for each course in the template. Django's generic ListView class provides an object called object_list. Since our CourseListView is daughter class of the ListView class, our CourseListView also provides an object called object_list. When we iterate over object_list, we'll iterate over the two courses we created in the Django admin. <!-- templates/courses/course_list.html --> {% extends 'bootstrap_base.html' %} {% block content %} <div class=\"card-deck\"> {% for course in object_list %} <div class=\"card text-white bg-info mb-3\" style=\"max-width: 18rem;\"> <div class=\"card-header\"> {{ course.college }}</div> <div class=\"card-body\"> <h5 class=\"card-title\">{{ course.course_number }} {{ course.course_name }}</h5> <p class=\"card-text\">{{ course.course_description }}</p> </div> <div class=\"card-footer bg-transparent text-center text-muted text-white-50\"> <a href=\"#\" class=\"badge badge-secondary\">Edit</a> | <a href=\"#\" class=\"badge badge-secondary\">Delete</a> </div> </div> {% endfor %} </div> {% endblock content %} Run the local server to see the results OK. We should be able to see the course page list now. Let's run the local server and browse to the /courses page. (transfer) > python manage.py runserver localhost:8000/courses It works! We see the two courses we added to the Django admin. Build tests for courses page Since we have a courses list page, we need to write a new test. We already have a couple tests. We can continue to improve our test coverage by adding tests for the new courses list page. # courses/tests.py ... class CoursesListPageTests(TestCase): def test_courses_list_page_status_code(self): response = self.client.get('/courses/') self.assertEqual(response.status_code, 200) def test_courses_view_uses_correct_template(self): response = self.client.get(reverse('/courses/') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/courses/course_list.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test The tests passed! Now our Django app has a working profile page. Summary In this post we created a courses model and added a course using the Django admin. Then we built a set of url patterns and views for the courses pages. We built a couple templates to display our courses. Finally we constructed and ran some tests on our course pages. Future Work Next, we'll build some authorization into the courses pages so that only 4-year University Administrators can add classes and access the course pages for their University. We also need to build in functionality for courses to be added using the site, instead of courses added using the Django admin.","title":"Oregon Engineering College Transfer App - Part 9: Classes Model"},{"location":"part9_classes_model/#why-a-classes-model","text":"The purpose of the Oregon Transfer App is to have a website that students can visit to see which classes transfer from Community College Engineering programs to 4-year University Engineering Programs. The classes at the 4-year Universities has to be part of the site. We need to add a way for 4-year University administrators to add, modify and delete classes taught at their University.","title":"Why a classes model?"},{"location":"part9_classes_model/#create-a-courses-app","text":"We need to build a courses app to contain our courses model. New Django apps, which are the components that make up Django projects are created with the manange.py startapp command. $ conda activate transfer (transfer) $ python manage.py startapp courses Now we need to add the new courses app to the list of installed apps in our Django project # transfer_project/settings.py INSTALLED_APPS = [ # project specific \"pages.apps.PagesConfig\", \"users.apps.UsersConfig\", \"courses.apps.CoursesConfig\", # 3rd party \"crispy_forms\", # django \"django.contrib.admin\", \"django.contrib.auth\", \"django.contrib.contenttypes\", \"django.contrib.sessions\", \"django.contrib.messages\", \"django.contrib.staticfiles\", ] We'll also add a time zone to the project settings so we can mark a time when each new course is added to the website. # transfer_project/settings.py # Internationalization # https://docs.djangoproject.com/en/2.1/topics/i18n/ LANGUAGE_CODE = \"en-us\" TIME_ZONE = \"America/Los_Angeles\"","title":"Create a courses app"},{"location":"part9_classes_model/#create-the-courses-model","text":"Now we need to create the courses model. This is defined within the courses app in the models.py file. Each class has a couple specific properties that we want to keep track of: Course number: Example ENGR114 Course name: Example Engineering Programming Credits: Example 4 Course description: Example A 2nd year engineeirng course for students to learn computer programing to solve engineering problems University name: Example PSU Department name: Example ECS Prereqs: Example ENGR101 and ENGR112 Course outcomes: Example 1. Demonstrate ability to use vectors Course page URL: Example https://pdx.edu/ECE112.html Date added: Example Oct 24, 2018 Added by: Example Kendra Lowry Possibly others? # courses/models.py from django.db import models from django.conf import settings from django.contrib.auth import get_user_model from django.db import models from django.urls import reverse class Course(models.Model): course_number = models.CharField(max_length=10) course_name = models.CharField(max_length=50) college = models.CharField(max_length=30) department = models.CharField(max_length=100) pre_reqs = models.CharField(max_length=50) course_description = models.TextField() course_outcomes = models.TextField() course_URL = models.URLField() date_added = models.DateTimeField(auto_now_add=True) added_by = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) def __str__(self): return f'{self.course_number} {self.course_name} {self.college}' def get_absolute_url(self): return reverse('course_detail', args=[str(self.id)])","title":"Create the courses model"},{"location":"part9_classes_model/#migrate-new-courses-model-to-the-database","text":"Now that the courses model is added, we need to migrate the model to the database. (transfer) $ python manage.py makemigrations courses (transfer) $ python manage.py migrate","title":"Migrate new courses model to the database"},{"location":"part9_classes_model/#add-courses-model-to-the-django-admin-and-test","text":"Now let's add our courses model to the Django admin so that we can test it's functionality. # courses/admin.py from django.contrib import admin from .models import Course admin.site.register(Course) Start the development server and bring up the Django admin. (transfer) $ python manage.py runserver browse to: localhost:8000/admin Login with the superuser account Add a new course with the [+] button Add course details Afer we save the course, we can see the course in the list of courses on the Django admin pannel. We can see the course number, course name and college as we specificed in the courses model Now that the courses model is running and we have a course added, let's add one more course through the Django admin. With two courses added we will be able to see what a course page looks like with more than one course and how we can iterated over the courses to build the courses page. Up next is creating a url route so we have a destination for our course page.","title":"Add courses model to the Django admin and test"},{"location":"part9_classes_model/#create-a-courses-url","text":"We want to create a url for our courses page. This needs to be accomplished in two steps. First we need to add a url to the over-all project urls, second we need to add a url to the courses app urls","title":"Create a courses URL"},{"location":"part9_classes_model/#add-a-courses-url-to-the-project-urls","text":"We'll add the sub-url /courses to proceed any url's that display course pages. In the project url's, we'll add a url route to go to our courses app url's # transfer_project/urls.py from django.contrib import admin from django.contrib.auth import views as auth_views from django.urls import path, include urlpatterns = [ path(\"admin/\", admin.site.urls), path( \"login/\", auth_views.LoginView.as_view(template_name=\"users/login.html\"), name=\"login\", ), path( \"logout/\", auth_views.LogoutView.as_view(template_name=\"users/logout.html\"), name=\"logout\", ), path('courses/', include('courses.urls')), path(\"\", include(\"pages.urls\")), ] Any url that starts with /courses is now routed to the courses app urls. So now we need to modify the courses app urls. Create a new url.py file in the courses app directory. # courses/urls.py from django.urls import path from .views import CourseListView urlpatterns = [ path('', CourseListView.as_view(), name='course_list'), ] We named the CourseListView as the view called when the /courses url is requested. This view needs to be constructed.","title":"Add a courses URL to the project urls"},{"location":"part9_classes_model/#create-a-courses-view","text":"To create the CourseListView , we'll create a custom class-based view from Django's generic ListView class. We'll assign the view to use the course_list.html template, which we'll put in the tempates/courses directory # courses/views.py from django.shortcuts import render from django.views.generic import ListView from .models import Course class CourseListView(ListView): model = Course template_name = 'courses/course_list.html'","title":"Create a courses View"},{"location":"part9_classes_model/#create-a-courses-template","text":"Our course list view is pointing to the template ourses/course_list.html so that's the template we'll construct next. We'll use bootstrap cards for each course in the template. Django's generic ListView class provides an object called object_list. Since our CourseListView is daughter class of the ListView class, our CourseListView also provides an object called object_list. When we iterate over object_list, we'll iterate over the two courses we created in the Django admin. <!-- templates/courses/course_list.html --> {% extends 'bootstrap_base.html' %} {% block content %} <div class=\"card-deck\"> {% for course in object_list %} <div class=\"card text-white bg-info mb-3\" style=\"max-width: 18rem;\"> <div class=\"card-header\"> {{ course.college }}</div> <div class=\"card-body\"> <h5 class=\"card-title\">{{ course.course_number }} {{ course.course_name }}</h5> <p class=\"card-text\">{{ course.course_description }}</p> </div> <div class=\"card-footer bg-transparent text-center text-muted text-white-50\"> <a href=\"#\" class=\"badge badge-secondary\">Edit</a> | <a href=\"#\" class=\"badge badge-secondary\">Delete</a> </div> </div> {% endfor %} </div> {% endblock content %}","title":"Create a courses template"},{"location":"part9_classes_model/#run-the-local-server-to-see-the-results","text":"OK. We should be able to see the course page list now. Let's run the local server and browse to the /courses page. (transfer) > python manage.py runserver localhost:8000/courses It works! We see the two courses we added to the Django admin.","title":"Run the local server to see the results"},{"location":"part9_classes_model/#build-tests-for-courses-page","text":"Since we have a courses list page, we need to write a new test. We already have a couple tests. We can continue to improve our test coverage by adding tests for the new courses list page. # courses/tests.py ... class CoursesListPageTests(TestCase): def test_courses_list_page_status_code(self): response = self.client.get('/courses/') self.assertEqual(response.status_code, 200) def test_courses_view_uses_correct_template(self): response = self.client.get(reverse('/courses/') self.assertEqual(response.status_code, 200) self.assertTemplateUsed(response, '/courses/course_list.html') Now let's run our tests and see if they all pass. At the Anaconda Prompt, type: (transfer) > python manage.py test The tests passed! Now our Django app has a working profile page.","title":"Build tests for courses page"},{"location":"part9_classes_model/#summary","text":"In this post we created a courses model and added a course using the Django admin. Then we built a set of url patterns and views for the courses pages. We built a couple templates to display our courses. Finally we constructed and ran some tests on our course pages.","title":"Summary"},{"location":"part9_classes_model/#future-work","text":"Next, we'll build some authorization into the courses pages so that only 4-year University Administrators can add classes and access the course pages for their University. We also need to build in functionality for courses to be added using the site, instead of courses added using the Django admin.","title":"Future Work"}]}